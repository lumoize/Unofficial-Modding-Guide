[ { "title": "Getting Started with Ready or Not Mapping in UE5", "url": "/posts/mapping_gettingstartedue5/", "categories": "Map Modding", "tags": "maps, essential, introduction", "date": "2024-08-08 00:00:00 +0000", "snippet": "Getting Started with Ready or Not Mapping in UE5 [POST DLC1 Home Invasion] If you already have a map made in UE4 for Ready or Not we have a Migration Guide into UE5 for you.IntroductionReady or Not is currently Unofficially supported by dedicated modders. Due to the hard work of them we are currently able to get around 80-90% of the experience that Official Maps have; there is expected to be a little bit of Jank when creating maps.This guide will step you through the basic set of requirements needed to build custom levels for Ready or Not and complete your first iteration by getting your map into the game. Ready or Not mapping REQUIRES that you download and use Unreal Engine 5.3.2. Do not download or use any other version. If this is your first time creating a map, be aware that the level of experience to create something functioning is considered Intemediate. It is recommended that you spend some time watching and learning some beginner videos for Unreal Engine on youtube before you start asking too many newbie questions.If you need help or have any questions, don’t hesitate to join the RoN Custom Maps Discord!The Level Design Cycle for RoNWe currently provide a template project that contains all the gameplay features/blueprints needed to make RoN maps here: Installation.For the Level Design process, you pretty much do it all within Unreal Engine, and can use whatever (reasonable) method you want to create your level.It is important to note that currently we cannot test gameplay within Unreal Engine and can only do it within the Game. To actually play the level you need to pack your level into a deployable .PAK file. More info here: Cooking &amp; Packaging &amp; InstallingDevelopment ExampleIf you would like to see what it’s like to make a map for Ready or Not, I recorded my entire development for Hell Comes to the Hills.YouTube Playlist: Ready or Not: Custom Map Development by DeltaInstallationUnreal Engine Download and install the Epic Launcher. Open the Launcher, go Unreal Engine on the left side bar, then Library along the top toolbar Under Engine Versions press the + icon and next to the Version Number, click the drop down and select 5.3.2 and InstallThe Template Project Download the Template from Nexus and extract it to your preferred location: Ready Or Not Community Mapping Framework Open the extracted ReadyOrNot folder and run ReadyOrNot.uprojectIf you open the Content Browser (Ctrl+Spacebar) and navigate to Content &gt; Mods &gt; Template &gt; Levels, there are 3 levels here: RoN_ExampleMap This is as the name suggests an Example Map which shows how the different mechanics of the game need to be implemented: Including Spawning, Doors, AI, Lighting, QSM and Ambient Sounds. It’s meant as a learning and reference level if you need to check how things should be implemented. RoN_ExampleMap_MissionSelect A very basic level that is only used when you are selecting a level in the Station. RoN_Template This is a barebones level that will cook and play in the game. You can use this as a template if you are making a new map, but we will make one from scratch in a little bit below to explain the requirements. Your First Map If you have seen previous YouTube tutorials it may have said you need to set up the Render Settings, or modify the Packaging settings. With the latest version of the Template, you do not need to change or extract any settings. You should be good to go from the first time you launch.The Folder StructureBefore we continue, it is very important to understand the folder structure of an Unreal Project.Unreal uses this concept of a Content folder, this is where all the game content and maps for the game reside (located at: ...\\ReadyOrNot\\Content).When you install a .PAK file you are essentially adding or overriding assets in Content. Any change you make here will likely affect other mods that people use. This a more common occurance when a lot of us are using the same Marketplace or Quixel/Megascans assets.To prevent us from stepping on each other’s work, It is highly suggested that you create a directory for yourself within the Mods folder using your username and place ALL your assets (including 3rd Party/Marketplace/Quixel/Megascans) there. The Mods folder should look like the following:Content Mods ModLevelData Template Tools YourUsername You will see other folders in here such as Template &amp; Tools. DO NOT edit the files in here. Since you will be visiting your folder frequently I would consider changing the the folder color and adding it your favourites within the Content Browser. You can do this by simply right-clicking the folder here.Bare Essentials for Gameplay Following the previous steps in Folder Structure, go to your ...\\Mod\\YourUsername directory in the Content Browser and create a new Level then open it Whatever you name it will be what it shows up as in-game But do not name it “House” - it is a restricted namespace and will not load in game Once opened, on the toolbar click Blueprints button and click Open Level Blueprint Under Class Settings, check the details panel and change the Parent Class to ReadyOrNotLevelScript Click Compile, and you can save and exit the window On the toolbar select Window &gt; Place Actors Within the new Place Actors window select the Geometry Tab and chuck down a couple of boxes to make a floor and a couple of walls to act as a space to play in. If everything is black, press Alt+3 to switch to Unlit Mode Back in the Place Actors window, search for, and place down the following: 1 Player Start Actor This is where your Player and Team Spawn Nav Mesh Bounds Volume Required for your AI to function, whatever this covers will be where your AI can walk Roster Scenario Spawner Actor This creates your gameplay objectives and spawns In the Content Browser, navigate to ...\\Content\\Template\\Blueprints and place down the following: 2 BP_AISpawn_Managed Spawn points for AI - we will come back to this in a little bit Also move them up from the ground about 50uu - Sometimes AI will not spawn if flush with the ground AI are technically not needed, but without it the map will automatically complete when you play it and you wont be able to test it. BP_SpawnManager_V3 Required to spawn AI BP_CoverGen Required for the AI to actually be active and move around the map during combat After you place down these Blueprints in your map you can search it in the Place Actors tab.Additional ThingsLightingCurrently your level doesn’t have any light, so we should set up the basic stuff so we can actually see when we playtest it. Add the following: On the toolbar select Window &gt; Env. Lighting Mixer and in the new window click on: Create Sky Light In the Outliner select it and set the Mobility to Static Create Atmosphereic Light (our Directional Light) In the Outliner select the DirectionalLight it and set the Mobility to Stationary Create Sky Atmosphere Create Sky Volumetric Cloud Create Height Fog In the Place Actors window search for and place down: Lightmass Importance Volume and adjust it to cover the playable area 1 Sphere Reflection Probe that encompasses the map Without reflections the models/guns in game can look flat and not properly lit. If you set your Directional Light to be the Atmosphere Sun Light (done by default if you did the above), you can use Ctrl+L to change the direction of your sun nowAI SpawnsThe 2 BP_AISpawns_Managed blueprints that we placed down are not configured yet, so lets do that by adding a Civilian and Suspect: Select an AISpawn and under AISpawn &gt; Spawn Array press the + symbol Expand the new array element and also expand Spawned AI This is where you choose what AI to Spawn To begin with change the Data Table to AIDataTable_Gas &amp; the Row Name to Civilian_Gas_Woman_01 Select the other AISpawn and follow the same steps but change the Row Name to Suspect_01_Shotgun Check for both of these AISpawns that the Spawn with Tags in the Spawn AI array element is set to “group1” The Spawn with Tags allows us to use the BP_SpawnManager_V3 to control what spawns with specific tags It should be set to “group1” by default. Additionally check that for each AISpawn that under Actor &gt; Tags there is an entry of “Managed” Without this the Spawn Manager cannot find the AISpawn and will not spawn them. It should be set to “Managed” by default. You can select any Data Table and Row Name for your map and you are not restricted to 1 Data Table.Your AISpawn details should look something similar to this:Spawn ManagerThe BP_SpawnManager_V3 is required to spawn AI. By default it is set up work with any AISpawn that uses “group1”. This can be found under Default &gt; AISpawn Configs in the manager.You are free to add and change the tags on the Spawns and Manager how you see fit for you level. There are a couple of notes: You can have AISpawns with different AIDataTable and/or Row Values spawn on the same tag without any issues. (it’s how we set it up above). eg: Notice that the 2 AISpawns have Civilian_Gas_Woman_01 &amp; Suspect_01_Shotgun but share the same tag of “group1” You can use this to create a variety of scenarios for your map! If you want a set number of a specific AI tag group to spawn, set the MinimumAmount &amp; MaximumAmount to be the same number. If you want to spawn a random range of enemies of a tag, set a min and max value but also Enable RandomizeWithinRange. For now we can just leave everything as default.DoorsDoors are pretty simple to place down and edit into your map. In the Content Browser, navigate to ...\\Content\\Template\\Blueprints and place down a BP_Door_Spawner. You can change which door you want by going to Default &gt; Door Type and selecting the desired door from the Row Name dropdown. The basic Template includes the Static Meshes so you can preview the door but not the materials. To get them you will need to follow the steps in Using Ready or Not Game Assets and Content Currently double doors do not work, it’s a bug and limitation we do not have the ability to address at the moment. They do work on the first time you load a map, but on subsequent loads they will not show as double doors anymore.Building / Baking DO NOT SELECT “BUILD ALL LEVELS”! Doing so will lock the editor in Texture Streaming and you will need to force close the editor through Task Manager. You have been warned!If you’ve been following along so far, then you probably have not built your map. Building parts of your map fixes up changes in Geometry &amp; Volumes, Lighting &amp; Reflections and Pathing. You should do it whenever you want to update/preview changes in your map.To build your map, on the Toolbar, drop down Build and select what is appropriate: Map Check Check for errors in your map - this will usually run if you do any build settings regardless but useful if you dont want to modify anything. Build Geometry This will rebuild your brushes and volumes after editing Usually best to do this first before any other builds Build Pathing Will update the NavMesh of any changes, best to do it after building geometry. Build Lighting Only As the name suggests, will build lighting on your map. This is what you’ll be building 90% of the time. Build Reflection Captures Self-explanatory, if you build lighting it will also usually build reflections, but if you want to save time and just update reflections use this. Build Landscapes Self-explanatory. Precompute Static Visibility NOTE: In UE5.3.2 Precomputed Visibility (PCV) is sorta broken - you cannot visualize cells in the Editor and you can never really get rid of the Error Message. You can disable the Error Message in Project Settings &gt; Engine Settings &gt; Rendering &gt; Culling and disable Warn about no precomputed visibiilty. You can STILL build PCV and the data will remain, but you will not be able to verify it. You will need to enable Precompute Visibility in World Settings to get it to build. PCV will usually build after lighting. My usual build process currently is: Build Geometery &gt; Pathing &gt; Lighting. Once the builds complete, you should File &gt; Save All Building times can vary, but the largest determining factor is usually Lighting. As map size increases and the quality of Lighting is changed, builds can take anywhere from 2mins all the way up to 6hrs and longer. At the moment the map should probably only take a couple of seconds.CookingCooking is the process of turning the project into content that can be deployed on other machines. We also only want cook content that is only important for the map to keep file size small. We need to configure this first: Go to Edit &gt; Project Settings and on the side tab select Project &gt; Packaging Under Packaging &gt; List of maps to include in a packaged build you should see an element that shows the directory for the RoN_ExampleMap and RoN_Template. If you do not see List of maps to include in a packaged build you may need to expand the Advanced category. Delete these 2 entries for now. Press the + and create an entry and enter your map’s directory within the project folder. Press the + again but this time, use your map’s BuildData, it should be in the exact same location as your map. You do not need to change any other settings and it should look something like this: Make sure you Save All before proceeding On the Toolbar click Platforms &gt; Windows &gt; Cook Content This could take some time for your first cook as it compiles all the shaders. Just be patient. You should hear it succeed, but a message will not remain on screen when it completes. If it failed the notification will stay on the screen. You will need to look at the Output log in the Editor to find out what the Errors are (you can ignore warnings - there will be a lot of them).Packaging &amp; Installing your MapPackaging will turn our cooked content into a single compressed file that we can actually use to play in game and distribute to other people. There are a bunch of Unreal packers out in the wild, but only use the following method for maps. Create a folder somewhere to act as your staging location for packing, name doesn’t matter but I use Paking. I wouldn’t create it in your project folder however. Within this folder create a new folder using the following naming convention: pakchunk99-YOURMAPNAME the 99 after pakchunk indicates the load order of paks. We keep maps at 99. Replace YOURMAPNAME with whatever your map’s name is. This will not show up in game, but will help identify your map/mod to people downloading your mod. A lot of mods have _P appended to the end of their .paks. For maps we do not need it and should not use this namespace. Using _P in your package actually patches over files and we do not want to to this! There are a bunch of shadercaches that are generated when wee cook our map and it will conflict with other mods if you include them.AGAIN. DO NOT ADD _P TO YOUR PAK NAME. Go to C:\\Program Files\\Epic Games\\UE_5.3\\Engine\\Binaries\\Win64 and create a .bat file here with the following arguments: @setlocal ENABLEDELAYEDEXPANSION@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~1(for /R %%f in (*) do @set \"filePath=%%f\" &amp; set \"relativePath=!filePath:%~1=!\" &amp; @echo \"%%f\" \"../../../ReadyOrNot!relativePath!\")&gt;\"%~dp0/filelist.txt\"@pushd %~dp0::-compresslevel=4 for Normal, -compresslevel=-4 for uncompressed hyperfast paking.\\UnrealPak.exe \"%~1.pak\" -create=filelist.txt -compress -compressionformats=Oodle -compressmethod=Kraken -compresslevel=4@popd@pause:skip Create a Shortcut to the .bat file you created and move it to your staging folder from step 1. Navigate to your Template/Project folder and go to: ...\\RoNTemplate\\Saved\\Cooked\\Windows\\ReadyOrNot and copy ONLY the Content folder Paste your Content folder into your pakchunk99-YOURMAPNAME folder From this pasted Content folder, enter it and delete the files that start with “ShaderArchive-Global” but do not delete any others If you include these files the game will immediately crash when you launch it. If you delete the others then materials in your map may be broken Drag your pakchunk99-YOURMAPNAME folder onto your .bat shortcut. A command window will pop up and tell you when it is complete. If successful you should have a new file in your staging directory named pakchunk99-YOURMAPNAME.pak Copy your pakchunk99-YOURMAPNAME.pak to C:\\SteamLibrary\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\Paks Your map should now be available in the gameThis is an example of what a Staging folder can look like: You will be jumping between these folders a lot, I really recommend putting your Staging folder, Project Cooked folder Ready or Not Pak directory to your Quick Access bar.Alternative Cooking &amp; Packaging MethodThere is another way to cook your map that does not produce shadercaches. But it requires some extra clicks and slower in the overall scheme of things. But if your Map is not loading correctly in game it is worth trying. Before you cook your map, open up Project Settings &gt; Packaging and Disable Share Material Shader Code BUT DO NOT RESTART THE EDITOR! If you restart the editor, materials from cooked RoN assets will be broken. Cook the map as usual. After cooking completes, Re-Enable Share Material Shader Code. Stage your package as usual, however you will not need to delete the “ShaderArchive-Global” files.Testing your MapThe easiest way to test your map is to simply load up the game and select it from the Mission Select screen. If all works well then it should take a couple of seconds to build WorldGen and plops you into the map.If you installed the Console Unlocker mod, you can also load into it faster by hitting ~ and typing open YOURMAPNAME and pressing execute. YOURMAPNAME should be what the .umap name is called within your project. NOT the package name. For Hell Comes to the Hills the command for opening it is open Hell_Comes_to_the_Hills.Common Issues with a Map not LoadingMake sure you did the following: Using the up-to-date version of the template linked above in this guide. You are using the packing method described above in this guide. Only include the Content folder from \\RoNTemplate\\Saved\\Cooked\\WindowsNoEditor\\ReadyOrNot Delete the “ShaderArchive-Global” files If you are still having issues try also deleting the files starting with “ShaderAssetInfo-Global” Or try the alternate method for cooking your map. You have all the actors mentioned in Bare Essentials for Gameplay.If your map is still not not launching, then you may want to reach out for help on the Mapping Discord linked above.Updating your Map after PlaytestingAnd Voilà! You’ve just gone through your first iteration of RoN Mapping!There are just some final important steps needed to know when you re-cook and package your map to test updates: After you recook your map, it is recommended that you delete the Content folder within your staged pakchunk99-YOURMAPNAME folder instead of overwriting it. Overwriting your folders may leave residual files and settings that may mess with your playtest BEFORE you launch the game. Navigate to C:\\Users\\USERNAME\\AppData\\Local\\ReadyOrNot\\Saved\\SaveGames and delete the WorldGen.sav file that has the same map name as your map (e.g. Hell Comes to the Hills filename looks like Hell_Comes_to_the_Hills_WorldGen_40173.sav). This step is critical! Each time the game launches your map for the first time, it generates World Data and stores it so the map launches faster the next time you play it. However the game does not know when your map has been changed. So you will likely be playing on a map with outdated build information resulting in quite a few bugs. The WorldGen contains information such as how doors are positions and connected, room sizes and layouts, stacking points, navigation, hiding spots and cover and a probably a lot of other things we don’t know about yet. So it is important to make sure you generate new World data with each iteration! Just like with the other folders, it is recommended you add the SaveGames directory to your quick access, as you will be visiting it quite a fair bit!Using Ready or Not Game Assets and ContentFModel Setup You will at least around 100GB free for the next part, we will be extracting the game’s cooked assets so they will show up in your map, and unfortunately require a lot of space.Download FModel: https://fmodel.app/Download Mappings file: Mapping File If first time using, click the arrows for ADD UNDETECTED GAME and select C:\\SteamLibrary\\steamapps\\common\\Ready Or Not\\ReadyOrNot as your directory AND press the + button. Select the UE Version to be GAME_UE5_3 and press OK Go to Settings and under General &gt; Advanced, Enable Local Mapping File and set the Mapping File Path to the downloaded Mappings file. (This will allow you to view the cooked content in FModel) OPTIONAL: In Settings &gt; Models &gt; Mesh Format, change it to glTF 2.0 (binary) so you can export static meshes Take note of your Export Directory On the Archives Tab, select all the .paks from the game and click Load. On the Folders Tab, navigate to the Content folder and right-click and select Export Folder's Packages Raw Data (.uasset). This will save all the cooked content from the game and might take some time.Once complete move onto the next stepCopy Cooked Content to your Project Close the new UE5 Template before continuing. Navigate to where FModel exported the cooked assets and copy the Content folder (or drag if storage space is limited) to your Project’s Content Folder. This INCLUDES the shadercaches. DO NOT overwrite any files if prompted! Just skip these files. If you overwrite them, you will need to start again from scratch with a new Project.All the game’s assets should be available in the project now, including working Materials, Decals and Particle Effects!Optional: Importing FMOD EventsIf you wish to hear the QSM or ambient sounds follow these steps: Navigate to C:\\SteamLibrary\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\FMOD and copy the Desktop folder. Navigate to your projects ...Content\\FMOD folder and paste the Desktop folder here.Where to Next?We have other guides that cover some more in-depth aspects of mapping that you can check out below:Setting up Audio and Working with QSMSetting up Music Events for LevelsMission Select (ModLevelData) - COMING SOONMap Optimization - COMING SOON" }, { "title": "UE4 to UE5 Map Migration Guide", "url": "/posts/mapping_ue5migration/", "categories": "Map Modding", "tags": "maps", "date": "2024-08-05 00:00:00 +0000", "snippet": "UE4 to UE5 Map Migration GuideIntroductionThis guide aims to help you transition your previous map from UE4.27.2 to UE5.3.2. It includes necessary steps and changes to the workflow to minimize the amount of work needed to port your map.1. UE5 TemplateDownload and Install Unreal Engine 5.3.2: https://www.unrealengine.com/en-US/downloadDownload the following new UE5 Template and extract to your preferred location: https://www.nexusmods.com/readyornot/mods/13842. UE4 Map PreparationNearly all of the previous work you have done can be ported over with exception of any Blueprints from the old Template.The following should be replaced (or deleted) with placeholder engine meshes so you can easily replace them after the migration: Landscapes (DELETE! You will need to remake these in UE5, but using a heightmap from your old Landscape can save you some time) BP_Doors_Reap BP_AISpawns_Reap BP_BreakableGlass_C FMOD Events RosterScenarioSpawner (Delete) WorldDataGenerator (Delete and no longer needed) BP_SpawnManager (Delete) BP_CoverGen (Delete)Ready Or Not Audio Volumes, Portal Volumes, Room Volumes, CoverGenOverride Volumes can remain as they are still the same actors. If they do not work convert them to a BlockingVolume (Under Actors tab in Details) temporarily to convert back after migration.Sound_ParameterTransition_V2_BP_C Blueprint can remain but it is likely you will need to reassign everything. You did organize your map already into nice folders in the Outliner right????3. FModel SetupWe no longer are using UModel anymore as it is no longer supported for UE5.Download FModel: https://fmodel.app/Download Mappings file: Mapping File If first time using, click the arrows for ADD UNDETECTED GAME and select C:\\SteamLibrary\\steamapps\\common\\Ready Or Not\\ReadyOrNot as your directory AND press the + button. Select the UE Version to be GAME_UE5_3 and press OK Go to Settings and under General &gt; Advanced, Enable Local Mapping File and set the Mapping File Path to the downloaded Mappings file. (This will allow you to view the cooked content in FModel) OPTIONAL: In Settings &gt; Models &gt; Mesh Format, change it to glTF 2.0 (binary) so you can export static meshes Take note of your Export Directory You will need around 100GB free for the next part, we will be extracting the game’s cooked assets so they will show up in your map, and unfortunately require a lot of space. On the Archives Tab, select all the .paks from the game and click Load. On the Folders Tab, navigate to the ReadyOrNot &gt; Content folder and right-click and select Export Folder's Packages Raw Data (.uasset). This will save all the cooked content from the game and might take some time.Once complete move onto the next step4. Copy Cooked Content to your Project Close the new UE5 Template before continuing. Navigate to where FModel exported the cooked assets and copy the Content folder (or drag if storage space is limited) to your Project’s Content Folder. This INCLUDES the shadercaches. DO NOT overwrite any files if prompted! Just skip these files. If you overwrite them, you will need to start again from scratch with a new Project.All the game’s assets should be available in the project now, including working Materials, Decals and Particle Effects!Optional: Importing FMOD EventsIf you wish to hear the QSM or ambient sounds follow these steps, there are placeholders if you do not wish to make your project folder any bigger: Navigate to C:\\SteamLibrary\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\FMOD and copy the Desktop folder. Navigate to your projects ...Content\\FMOD folder and paste the Desktop folder here.5. Migrating your UE4 map to the new UE5 Project Make sure the UE5 Template is closed before continuing. In your UE4 Project, right click on your Level and select Asset Actions &gt; Migrate DESELECT everything first. We do not want to copy ANY of the old Blueprints or Cooked Content Navigate to your Mods &gt; YourUsername section (where your Map SHOULD be located) and ONLY SELECT these files (or any Files YOU created and want to carry over). Hit OK. You do not need to copy over any previous contents from Mods &gt; Reap In the new Window, select the location of the Content folder of the UE5 Project and proceed. Once complete open up your map in the UE5 Project and inspect the result. If you Level wont open or crashes the Editor, I would recommend taking a more manual process to migrating the map. Following up to step 5, instead create a new Level and manually Copy-Paste assets between Editors. DO NOT copy anything RoN Specific this time. Make sure not to have any Landscapes either.6. Fixing Issues and missing AssetsFixing Inverted Collision from Migration There is a serious bug that occurs when migrating from 4.27 to 5.3, any custom Static Meshes you bring into the project will have their collisions Inverted. Thankfully VOID also encountered this and helped with the solution (major thanks to killowatt &amp; RareKiwi for this)To fix this: Select all Static Meshes that you migrated in the content browser. Easiest way to do this is just select your mod username directory and filter for Static Meshes If you turn on Player Collision view mode, you will see all the normals on the collisions of your assets are flipped if placed in a level With the meshes selected right-click and select Scripted Actor Actions &gt; Collision Fix Up. This will iterate through the meshes and correct their collision. Verify they are correct in Player Collision view mode.Alternatively, you can do the same steps on selected actors within a Scene by right-clicking them and selecting Scripted Actor Actions &gt; Collision Fix UpReassigning NULL Static MeshesIf you have followed the steps up to this point, the map should be mostly still intact. Most of the cooked assets from UE4 have remained in the same location in UE5, but now you can also view their materials!There is mostly likely going to be a few hundred missing cooked assets due to files being moved by VOID with the update. To identify what is missing, click Build &gt; Check Map.All missing assets should say “Static mesh actor has NULL StaticMesh property”. Provided you haven’t renamed any files it should be pretty straight-forward to find the same named asset in the Content Browser and replace them in the scene. Unfortunately there is not an easy/fast way to do this, so brew a cuppa and get to work. If you do Step 5 before Step 4, ALL of the references to previous cooked contents might return NULL, instead of just a few. Just to be safe, make sure the cooked content is in the project before Migrating or CopyingNew Basic Map Requirements and Changes Do not click Build All, currently doing so will lock the Editor in “Building Texture Streaming” and will require you close it via Task Manager. You unfortunately have to Build Geometry, Paths and Lighting separately now.Things mostly remain the same, however the following changes to workflow are needed to make sure that the map runs correctly: Set the Level Blueprint Parent Class type to Ready or Not Level Script Not doing so will result in things not working properly, specifically objectives, spawns and QSM/FMOD DO NOT set ItemData datatable in the Item Data field of the Blueprint Class If included, cooking will fail - there is a dummy ItemData in the project that shouldn’t cause this. But better safe than sorry. REMEMBER TO REMOVE IT after you have migrated from UE4 - it may still be assigned. Add a RosterScenarioSpawner actor Without it the map will crash on Level load BP_SpawnManager_V3 is required now (located in Mods &gt; Template &gt; Blueprints) Without it no AISpawns will not work Make sure that all BP_AISpawns_Managed have “Managed” assigned to their Details &gt; Actor &gt; Tags Without it no AI will spawn even with the Spawn Manager This may happen if you Right Click &gt; Replace Selected Actors with on placeholder actors after the migration. Add a BP_CoverGen actor Without it AI won’t really move or do anything when engaged in fights Multple PlayerSpawns are no long spawn the SWAT AI on them; they will all spawn on your PlayerSpawn. You only need 1 PlayerSpawn per actual Spawn Point (set in ModLevelData Table). QSM Changes - Documentation Soon™7. New Cook &amp; Pak MethodCook and Paking remains the same process as before but there are 2 important things that have changed.Updated .bat Pak fileYou NEED to use the new updated .bat with the UE5.3 files (do not just edit your existing one):More Info@setlocal ENABLEDELAYEDEXPANSION@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~1(for /R %%f in (*) do @set \"filePath=%%f\" &amp; set \"relativePath=!filePath:%~1=!\" &amp; @echo \"%%f\" \"../../../ReadyOrNot!relativePath!\")&gt;\"%~dp0/filelist.txt\"@pushd %~dp0::-compresslevel=4 for Normal, -compresslevel=-4 for uncompressed hyperfast paking.\\UnrealPak.exe \"%~1.pak\" -create=filelist.txt -compress -compressionformats=Oodle -compressmethod=Kraken -compresslevel=4@popd@pause:skipDelete Global ShaderArchivesCooking a map now produces Shadercaches, there is an extra step needed for cooking to prevent them from being cooked but still provide the necessary ones for your materials and .uassets: Before you cook, go to Edit &gt; Project Settings &gt; Packaging, and disable Share Material Shader Code - BUT DO NOT RESTART THE EDITOR! Cook your map as usual. When cook is complete, re-enabled Share Material Shader Code. The above method should be used if you are sharing/distributing your final map .pak. If you include shadercaches that aren’t just your own materials than we might run into conflicts.For faster development however - you can just cook and copy the Content folder as usual without always needing to disable/enable Share Material Shader Code. HOWEVER if you include files named similar to ShaderArchive-Global-PCD3D_SM5-PCD3D_SM5 then Ready Or Not will crash on launch. So before you Pak your map, make sure you delete the all the ones named ShaderArchive-Global... (you can leave the others) from the Content folder. If you delete the other ones some of your custom materials may not render properly in-game. However, if there are some issues with your own materials, also try deleting the files named like ””As a final resultIf you are still having issues also try deleting the ones named:JUST REMEMBER TO DO THE COOK METHOD MENTIONED FIRST FOR DISTRIBUTION!Cool stuff in the New Template!!!!11!!1!!11 In Mods &gt; Template &gt; Levels there are 2 Maps: RoN_Template is a barebones map that is the absolute bare minimum to get a level working. RoN_ExampleMap showcases how to build a map. It has information on the Spawn Manager, Objectives, QSM and working with the FMOD, along with some other interesting bits of information In general the layout of information and Blueprints we actually use is a lot cleaner now. We now have the Actor Palette Plugin enabled. This allows you to open up a level under Tools &gt; Actor Palette. Doing so allows you to drag and drop Assets from the window into you map with ease! Very cool~ There are a bunch of maps in Mods &gt; Template &gt; Levels &gt; ActorPalette that you can load to test Warning: These maps require a LOT of memory as they are loading essentially all the usable props from cooked assets. I would not open Palette_MASTER unless you have a strong PC. We can now create custom doors from our own DoorData DataTables (and there are tools to help copy over Door and AI rows from cooked assets courtesy of RareKiwi).Known Bugs Double doors do not seem to work as double doors after the first load of the game, this seems to be an issue with the World Generation that is out of our hands for now. When saving or opening a Level, the editor will ask you save changes to BP_Makarov_2Handed_AnimData and BP_Tec9_AnimData, you can ignore these. Saving wont break the project if you do.Credits and ThanksKingly credits need to go to RareKiwi for his dedication to updating the project and previous Blueprints. It is no small thing to say that without him, we would not have the new Template.Additional Credits to KITT, StenTheAwesome, Delta, Reap, The Real Sourc3 and to the beautiful VOID Interactive Devs (killowatt, Zack, QuantumNuke and Hunter)." }, { "title": "UE4SS and Mappings [UE5.3+]", "url": "/posts/ue4ss_and_mappings/", "categories": "UAsset Modding", "tags": "ue4ss, mappings, fmodel, uassetgui", "date": "2024-07-23 00:00:00 +0000", "snippet": "Mappings DownloadWith the Unreal Engine upgrade to 5.3, you will now need a Mappings.usmap for UAssetGUI and Fmodel to fully function.You can download a shared version of the Mappings.usmap for Ready Or Not below:Ready Or Mod DiscordUMG Mappings.usmapUAssetGUI Import Ensure UAssetGUI is updated for UE5.3 (Versions 1.0.1.0+) Open Utils &gt; Import mappings... Navigate to your downloaded or generated Mappings.usmap Give it a name. Happy Modding! You can find your stored mappings in the config directory, Help &gt; Open Config Directory...Or in %localappdata%\\UAssetGUIFModel Import Ensure FModel is already configured for Ready Or Not and UE5.3 Open Settings Enable the Enable Local Mapping File checkbox Press the ... and navigate to your downloaded or generated Mappings.usmap Press OK to close the settings, then restart Fmodel.UE4SSInstall Download UE4SS_v3.0.1.zip from Github UE4SS Releases Extract the contents next to the ReadyOrNot-Win64-Shipping.exe in...\\Ready Or Not\\ReadyOrNot\\Binaries\\Win64\\Generating MappingsHow to create a new Mappings.usmap Open UE4SS-settings.ini and change the following: MajorVersion = 5MinorVersion = 3ConsoleEnabled = 1GuiConsoleEnabled = 1GuiConsoleVisible = 1GraphicsAPI = dx11 Start the game, wait to load to menu, switch to the UE4SS window Under the Dumpers tab press Generate .usmap file..... It should work instantly, but you can confirm on the Console tab.The file Mappings.usmap should be create next to your .exe You can close the game now. If you want to disable UE4SS you can rename dwmapi.dll or remove it’s files.Otherwise it’s quite handy for enabling the in game console, you may just want to hide the GUI window if your not using it GuiConsoleVisible = 0 " }, { "title": "Reference - FMOD Parameters", "url": "/posts/reference_fmod_parameters/", "categories": "Reference", "tags": "reference, maps, audio", "date": "2024-01-14 00:00:00 +0000", "snippet": "Reference - FMOD ParametersThe following tables list the different parameters to use with the Sound_ParameterTransition_V2_BP_C Blueprint to modify Ambient and Music queues within your level.[D] = Dynamic parameter: These are layers that can be toggled between different states multiple times, and transition between them freely. Usually if x parameter = 1, a layer’s volume is brought up, if 0, it’s back down again.[S] = Static parameter: These are single use events that are one and done, you cannot trigger them again after the initial firing. These are used for timelines that have some linear progression to them or trigger a sting event (eg: seeing the pictures on Streamer). Once it’s triggered, it shouldn’t be set back to 0. You cannot go backwards on the music timelines once these are called. FMOD Events Parameters are NOT case sensitive. Spaces in some names are required however.AgencyAmbience: Agency_Amb Parameter Name Type Description AgencyAmbIN [D]   AgencyAmbOUT [D]   AgencyAmbSTORE [D]   AgencyAmbWAREHOUSE [D]   AgencyAmbWAREHOUSECOVER [D] Muffles warehouse ambience. AgencyClothesRain [D] Rain on clothes volume. AmbSwitch [D] Muffles rain ambience depending on amount, 0 = unmuffled, 1 = muffled, etc. AgencyExtEventsPlay [D] This is automated by AmbSwitch, do not change. Music: Main_Agency_Timeline Parameter Name Type Description AgencyMusicIN [S] transitions the music into the inside sections AgencyMusicQUIET [D] lowers the volume of certain layers AgencyMusicMIRROR [D] Controls creepy aaaaaaaa BeachfrontAmbience: Beachfront_Amb Parameter Name Type Description BeachfrontAmbHOUSE [D] House ambience BeachfrontAmbHOUSEDEEP [D] Deeper house ambience BeachfrontAmbOUT [D] Outside ambience Music: Main_Beachfront_Timeline Parameter Name Type Description BeachfrontHOUSEENTER [D] transitions the music into the inside sections BeachfrontATTICENTER [S] allows the timeline to flow to the piano section BeachfrontHOUSECHIMES [D] If == 1, you can hear the spatial event Beachfront_Chimes_Spatial EndLoop Ambswitch Controlled 0-1 Outside non-looping, 1-9 Is inside looping Timeline will continue to play initial guitar chords until BeachfrontHOUSEENTER == 1 Timeline will continue to play muted bass hits until combat is entered Timeline will loop a combat section as long as the player stays in combat Timeline will eventually transition to a post combat loop until BeachfrontATTICENTER == 1 Timeline will play attic section with piano until reaching an ‘end loop’ that eventually transitions to a quieter loop if ambswitch &lt; 1 (Outside)Two spatial FMOD events, Beachfront_Chimes_Spatial and Beachfront_Flutes_Spatial, can be placed on your map and act as spatial accompaniments The flute spatial sounds will only trigger if AmbSwitch &gt;= 1 and is placed in your map. The chimes spatial sound will play if BeachfrontHOUSECHIMES == 1 and is placed in your map.CampusAmbience: Campus_Amb Parameter Name Type Description CampusAmbBATHROOM [D]   CampusAmbCL1 [D]   CampusAmbCL2 [D]   CampusAmbHALL1 [D]   CampusAmbHALL2 [D]   CampusAmbLECTURE [D]   CampusAmbLIBRARY [D]   CampusAmbOUT [D]   CampusAmbROOMSMALL [D]   Music: None available.ClubAmbience: Club_Amb_V2 Parameter Name Type Description ClubAmbBAR [D]   ClubAmbBIG [D]   ClubAmbDEEP [D]   ClubAmbMAIN [D]   ClubAmbMETAL [D] adds an eerie metal layer over the ambience, like metal clangs. Music: Main_Club_Timeline Parameter Name Type Description MasterZackVolume [D] transitions the music to the ‘club music turned off’ sections ClubOSTRooms [D] transitions to a variant of certain layers ClubOSTHalls [D] transitions to a variant of certain layers ClubOSTDeep [D] transitions to a variant of certain layers ClubOSTSauna [D] transitions to a variant of certain layers ClubOSTBodyRoom [D] ups the volume on a disturbing layer Timeline will remain silent until MasterZackVolume == 1CoyoteAmbience: Amb_Coyote Parameter Name Type Description CoyoteAmbBARN [D]   CoyoteAmbCAVE [D]   CoyoteAmbGARAGE [D]   CoyoteAmbHOUSE [D]   CoyoteAmbOUT [D]   CoyoteAmbROOM [D]   CoyoteAmbTUNNEL [D]   CoyoteWINDVOL [D] this controls the volume of the exterior wind. No changes needed. Music: Main_Coyote_Timeline Parameter Name Type Description CoyoteTUNNELSPOTTED [S] transitions the music past the intro section CoyoteCAVEDEPTH1 [S] transitions further into the music timeline CoyoteCAVEDEPTH2 [S] transitions further into the music timeline CoyoteCAVEDEPTH3 [S] transitions further into the music timeline CoyoteSIDECAVES [D] adds a shaker layer Coyote is a more linear timeline as you move through the tunnels, so each Depth adds more layers to the soundtrack.There is 1 spatial FMOD Event Coyote_Spatial_Drum. This is used at the entrance of the cave before you enter. As long as this is placed in your map, this will continue to play while CoyoteCAVEDEPTH1 == 0DataCenterAmbience: Data_Center_Amb Parameter Name Type Description DataAmbINT [D]   DataAmbINTCOVER [D] Muffles inside ambience DataAmbKITCHEN [D]   DataAmbOUT [D]   DataAmbSERVER [D]   DataAmbSERVERCOVER [D] Muffles server room ambience AmbSwitch [D] referenced but not used Music: Main_Data_Center_Timeline Parameter Name Type Description DataCenter Entered 1 [D] transitions the music into the inside sections AmbSwitch [D] changes certain layers coming in, having it go from 0-2 should adjust the intensity, 1 would be like the entrance and outer rooms while 2 would be inside the main server room AmbSwitch is used to add more depth as you get deeper into the map The timeline will only continue properly as long as DataCenter Entered == 1 and AmbSwitch &gt; 0 You can trigger multiple different sections depending on the value of AmbSwitch (so ambswitch 1 is a new section, ambswitch 2 new section)DealerAmbience: Dealer_Amb_V2 Parameter Name Type Description DealerAmbACHUM [D] AmbSwitch muffles this value if set to 2 DealerAmbBIGROOMHUM [D]   DealerAmbBOILERROOM [D]   DealerAmbMAINROOMHUM [D] AmbSwitch muffles this value if set to 2 DealerAmbOUTSIDE [D] AmbSwitch muffles this value if set to 1 AmbSwitch [D] see above for descriptors on what ambswitch does to each Music: Main_Dealer_Timeline_V2 Parameter Name Type Description DealerEXPReception [D] The close the value is to 1, the more muffled the game OST will be DealerEXPMurderRoom [D] makes certain layers all distorted FarmAmbience: Farm_Amb_V3 Parameter Name Type Description FarmAmbCELLAR [D]   FarmAmbCHURCH [D]   FarmAmbGRHOUSE [D]   FarmAmbHOUSE [D]   FarmAmbOUT [D]   FarmAmbOUTCOVER [D] Muffles exterior ambience FarmAmbSTAIRS [D]   FarmAmbWOODS [D]   Music: Main_Farm_Timeline Parameter Name Type Description FarmMusicENTRY [S] transitions to a sudden drum hit and continues the timeline FarmMusicENTRYAPPROACH [D] adjusts the volume of the initial entry choir sound FarmMusicDRONEINSIDE [D] volume for inside drone layer FarmMusicDRONEOUTSIDE [D] volume for outside drone layer       FarmMusicCHURCHAPPROACH [D] used when approaching church FarmMusicDRONECHURCH [D] volume for church drone / scarier rooms FarmMusicDRONECHURCHCLOSER [D] volume for more intense church drone FarmMusicCHURCHDRUMSPEED [D] Increases drum speed 0 = slow, 1 = faster FarmMusicTREE [S] triggers the tree stinger and subsequent eerie organ section There are 3 spatial events: Farm_Music_Spatial_Drum, Farm_Music_Spatial_Synth and Farm_Music_Spatial_Voice The timeline will only continue properly if FarmMusicENTRY == 1. As FarmMusicENTRYAPPROACH increases to 1, a choir layer is increased in volume - this layer only plays during the intro section. Once FarmMusicENTRY == 1, a large drum hit will play, and the timeline will continue. Using the assorted drone parameters, different layers can come in and out To have the church approach section play, set FarmMusicCHURCHAPPROACH to 1. As long as the Farm_Music_Spatial_Drum FMOD event is placed in your map, you should hear this drum play spatially now. To control the drum speed, set FarmMusicCHURCHDRUMSPEED to 0 for slow or 1 for faster To continue the timeline past the church section and fire the spooky stinger, set FarmMusicTREE to 1. The timeline will eventually return back to the third stage, where you can use the drone parameters again to control different layers.GasAmbience: Gas_Amb_V2 Parameter Name Type Description GasAmbIN [D]   GasAmbINCOVER [D] Muffles inside ambience GasAmbOUT [D] AmbSwitch lowers reverb volume for certain sounds within the ambience… Not sure… why. Oopsies. Music: Main_Gas_Timeline Parameter Name Type Description GasMainBuilding [D] transitions the music past the intro GasSideBuilding [D] muffles the music - this is unused in vanilla but still works GasDiegetic [D] muffles the music as well, this is used around diegetic music sources HospitalAmbience: Hospital_Amb_V2 Parameter Name Type Description HospitalAmbDEEP [D] if AmbSwitch &lt; 3, this ambience is muffled HospitalAmbINT [D] if AmbSwitch &lt; 3, this ambience is muffled HospitalAmbMORGUE [D]   HospitalAmbOUT [D]   Music: Main_Hospital_Timeline Parameter Name Type Description HospitalLIGHTSPOTTED [S] triggers a light stinger HospitalHEAVYSPOTTED [S] triggers a heavier stinger       HospitalDEPTH1 [S] once triggered, each step advances the timeline further and adds more layers. So the deeper you go through hospital for example, it fires 1 through 4 respectively. HospitalDEPTH2 [S] ”” HospitalDEPTH3 [S] ”” HospitalDEPTH4 [S] ””       HospitalDEPTH [D]   The SPOTTED events are meant to be used for spotting things like bullet holes, blood and dead bodies The way Hospital works, is that the Transition Volumes are set up so as you go deeper it adds more layers. Since there are different spawn locations on different sides of the map, Hospital sets up multiple Transitions, for example Depth2, so no matter which side you enter from it will always trigger. It continues to cascade Transitions in-wards from opposite sides as you continue to move deeper through the map.There are 6 FMOD events that you can place if this music is used, that have synchronized beeps to the music (Hospital_OST_Beeps_1 - 6)ImporterAmbience: Imp_Amb Parameter Name Type Description ImporterToBathroom [D]   ImporterToConveyor [D]   ImporterToPost [D]   ImporterToRoomA [D]   ImporterToRoomB [D]   AmbSwitch [D] AmbSwitch is used to lower the exterior ambience volume for this level. 0 = full volume, 1 = silent. Music: Main_Importer_Timeline Parameter Name Type Description ImporterMusicINSIDE [D] transitions the music to the inside sections ImporterMusicILLEGALACTIVITYSEEN [S] triggers certain lead lines to come in MethAmbience: Meth_Amb_V2 Parameter Name Type Description MethAmbLAUNDRY [D]   MethAmbSTREETINT [D] AmbSwitch is used to change between inside / outside ambiences. 0 = exterior, 1 = interior. MethAmbTUNNEL [D]   MethOutdoorEventsPlay [D] AmbSwitch automates this. Don’t change. Music: Main_Meth_Timeline_V2 Parameter Name Type Description AmbSwitch [D] 0 = outside sections play, 1 = inside sections play, 2 = outdated laundry section plays, 3 = tunnel section plays PenthouseAmbience: Penthouse_Amb_V2 Parameter Name Type Description PenthouseAmbBALCONY [D]   PenthouseAmbHALL [D]   PenthouseAmbROOMS [D]   PenthouseAmbSTAIRWELL [D]   Music: Main_Penthouse_Timeline_V2 No parameters to edit, Timeline will just work.PortAmbience: Port_V2_Amb Parameter Name Type Description PortAmbAUCTION [D]   PortAmbCONTAINER [D]   PortAmbOUT [D]   PortAmbOUTCOVER [D] muffles exterior ambience PortAmbRAINCLOTHES [D] Rain on clothes volume. PortAmbSHACK [D]   PortAmbTOWER [D]   PortAmbTOWEROUT [D]   PortAmbTRAFFICKINGCONTAINER_SFX [D] muffles all ambiences if value is 1. PortAmbWAREHOUSE [D]   PortAmbWAREHOUSEDEEP [D] Muffles warehouse ambience. Music: Main_Port_Timeline_V2 Parameter Name Type Description PortCRANEAREALEAFT [S] advances timeline past silence PortINTERIOR [D] plays interior layer PortWAREHOUSE [D] plays warehouse layer PortAUCTION [D] plays auction area layer PortAUCTIONDEEP [D] plays deep auction layer PortTRAFFICK [D] triggers crate section RidgelineAmbience: Ridgeline_Amb Parameter Name Type Description AmbSwitch [D] controls the ambience on this map. 0 = exterior, 1 = interior. Music: Main_Ridgeline_Timeline Parameter Name Type Description AmbSwitch [D] 1.5 = triggers basement section RidgelineTOINT [D] plays inside layers SinsAmbience: Sins_Amb Parameter Name Type Description SinsAmbBAR [D]   SinsAmbBATHROOM [D]   SinsAmbCLOTHESRAIN [D] rain on clothes volume. SinsAmbHALL [D]   SinsAmbKITCHEN [D]   SinsAmbLOBBY [D]   SinsAmbLOUNGE [D]   SinsAmbOUT [D]   SinsAmbROOM [D]   Music: Sins_Club_Timeline Parameter Name Type Description SinsENTRY [S] advances timeline past silence For this level, there are 6 special spatial events - 5 opera singer events (Sins_Opera_Pos_1 - 5) and 1 star spangled event (Sins_StarSpangled_Spatial)StationAmbience: StationV2_Amb Parameter Name Type Description StationAmbBASEMENT [D]   StationAmbBASEMENTBIG [D]   StationAmbHONOUR [D]   StationAmbIN [D]   StationAmbOFFICE [D]   StationAmbOFFICE2 [D]   StationAmbOUT [D]   StationAmbRANGE [D]   StationAmbROSTER [D]   Music: Main_Station_Timeline Parameter Name Type Description LobbyMusicKILLHOUSE [D]   LobbyMusicLOADOUT [D]   LobbyMusicMEMORIAL [D]   LobbyMusicMEMORIALSTATUE [D]   LobbyMusicMISSIONSELECT [D]   LobbyMusicMORALE [D]   LobbyMusicOUTSIDE [D]   LobbyMusicRANGE [D]   LobbyMusicREADYROOM [D]   LobbyMusicSELECT [D]   LobbyMusicSELECTED [D]   LobbyMusicUNDER [D]   LobbyMusicVOLUME [D]   Lobby_Ready [D]   A lot of these parameters for the Station OST are set in code, so be cautious if you decide to use these… Fun fact with the station OST, depending on how far through the campaign you are, if you go into the memorial room, there’s a horn section layer that plays spatially if you go straight to it when loading in. You might have to wait a few seconds to hear itStreamerAmbience: Streamer_Amb Parameter Name Type Description StreamerAmbAPARTMENT [D]   StreamerAmbBATHROOM [D]   StreamerAmbIN [D] Ambswitch lowers volume. 0 = full volume, 1 = lower volume. StreamerAmbMINING [D]   StreamerAmbOUT [D] Ambswitch lowers volume. 0 = full volume, 1 = lower volume. Music: Main_Streamer_Timeline Parameter Name Type Description StreamerENTRY [S] advances timeline past intro StreamerSERVERROOM [S] advances timeline to server section StreamerAGENCYPICSSEEN [S] plays agency stinger StreamerROOMENTERED [D] lowers volume of certain layers. If AmbSwitch &lt;= 1.35, this value will be 0. If AmbSwitch &gt;= 2, this value will be 1. StreamerMAINROOM [D] changes volume of certain layers. There are 2 spatial events, Streamer_Spatial_Server_A and Streamer_Spatial_Server_B, these play those lil server chirps that sync with the trackTrainingAmbience: Training_Amb_V2 Parameter Name Type Description AmbSwitch [D] If AmbSwitch &gt; 0, the sound becomes muffled Music: None available.ValleyAmbience: Valley_Amb_V2 Parameter Name Type Description ValleyAmbBUNKER [S]   ValleyAmbEXT [S]   ValleyAmbINT [S] Ambswitch &gt; 1 muffles this layer. Music: Main_Valley_Timeline_V2 Parameter Name Type Description ValleyAmbBUNKER [D] transitions to bunker section ValleyMusicBUNKERDEEP [D] plays disturbing bunker layer The space is part of the name and not a typo. &#8617; " }, { "title": "Setting up Music Events for Maps", "url": "/posts/mapping_music/", "categories": "Map Modding", "tags": "maps, audio", "date": "2024-01-14 00:00:00 +0000", "snippet": "Setting up Music Events for Maps Setting up Audio and Working with QSM for Maps is REQUIRED knowledge for this page. Please read it before continuing.IntroductionThis guide will step you through the requirements to get music implemented into your game. It will also discuss how to use the more dynamic elements of the OST to make your levels feel much more polished.There is an Example map provided in the Community Mapping Framework that demonstrates the use of the OST and some of the additional actors you can use with it.Level Blueprint SetupFor music to react dynamically to combat, the bare minimum you need to do is to set it up in the Level Blueprint. Open the Level Blueprint for you main Level Click on the Class Defaults button at the top and under details panel locate Ready or Not Level Script &gt; Level Data &gt; Music Data In Music Data assign the Data Asset for the music you wish to use for you level. These are located at Content &gt; ReadyOrNot &gt; Data &gt; Music Click Compile and Save. You can close the Blueprint and next time you play your Level, it should play the music assigned and dynamically change when you enter combat! If you just want some general music in your level to react to combat, this is all you need! You do not need to implement the complex sections below to get music working.Controlling the OST The information here is very nuanced and hard to explain. Not many people have worked with this, so information and support is limited. The info below should give you a general understanding of the concepts needed to start tinkering with it, but it is not comprehensive. The main bulk of information comes from Zack and he is the person to talk to if you have a specific question about the interactions.If you want to take full advantage of the OST of the game, you will need to leverage the Sound_ParameterTransition_V2_BP_C Blueprint (T-BP from here on) to control FMOD Parameters. This is pretty much the only actor needed to control the OST. ALL the values and parameters you will need are documented here: Reference - FMOD ParametersThe OST Timelines are different for each map. Depending on the map chosen, you may need to adjust the timeline in different ways.There are generally 2 ways to do this: As simple named Parameter with no values These require you to add the Level’s music timeline to the FMOD Ambient / Music Events array of existing T-BP for Ambients/Doors or used by themselves on a dedicated T-BP. You then add the Parameter name to the INParameter/OUTParameter of said element. e.g. Just like you would for GasAmbIN or GasAmbOUT for Ambient Events. These events do not need anything special to be done to them and will advance the OST timeline on the corresponding IN/OUT side of the T-BP. Controlled by AmbSwitch If a Parameter is controlled by AmbSwitch, you do not need to add the music timeline to the FMOD Ambient / Music Events of the T-BP, only FMOD Global Parameter needs to be set to “AmbSwitch”. These are typically used for when you are going deeper into a structure and things need to get muffled. Most of these are dynamic and have values that can be used between 0-3 depending on the map and generally match up with the same level’s Ambient Event. If you are using a Music Timeline and Ambient Event from different maps, you will likely encounter weird behavior. In these cases it’s recommended to use 2 separate T-BPs in the same spot with different values for AmbSwitch to avoid conflicts. Up until this point, the T-BP has just been used for controlling the ambient sounds when you enter through doors, however you can use T-BPs as ways to section off zones and you can be a little more fluid with their size and placement. Not all areas are cut+paste rooms with door thresholds, sometimes we have open areas (think Farm) that need to advance the timeline when players pass a certain threshold.The example map provided does this, In the picture below, I have selected 4 different T-BP with the same variables but have been arranged to form a zone the player can’t avoid if they wish to pass. It affectly makes it so when you pass the blue line (visual representation) from any location, the timeline will progress. In this case it triggers the StreamerENTRY parameter on the IN side of the T-BP.You may want to use a method similar to this if you have a map with multiple spawn locations that eventually converge to the same locations. This is what was done in Hospital. Players can start on different sides of the map, but the timeline will progress the same no matter which spawn they choose as they progress deeper into the map. Regardless of where they start or end, the timeline will hit the same beats as the T-BPs have been set up to activate equally on either side as they cascade deeper into the structure.Sound_LookAtParameterTrigger_BP_CThis is a blueprint that plays a sting when you look at a specific location. It was used in the game for musical stings when players looked at those photos in Streamer, or Blood/Bullet holes in Hospital. These events will ONLY work on those timelines and you cannot mix-and-match them. They are usually static events (only played once and cannot be trigger again).The following maps have events that are compatible with the Music Timelines: Streamer Hospital Dorms Property Description FMOD Event to Change Chuck the timeline you are using in here FMOD Parameter to Change Self explanatory. eg: For Streamer, you would play StreamerAGENCYPICSSEEN to activate the sting DO NOT Edit the scale of these or any of their components! If you require to edit the shape - modify the Box’s Box Extent or LookAtTrigger’s Sphere Radius .Sound_MusicParameterChanger_BP_CThis blueprints acts as a way to dynamically change some specific Timeline parameters as players get closer or further away from them. eg: Muffling the Timeline when the player gets closer to the Jukebox in Gas, you can hear the Jukebox music clearer. Property Description Radius Self-explanatory Event The Timeline event to modify Parameter Name Parameter name to edit. eg: In Gas it would be GasDiegetic Indoor / Outdoor Check If the change needs to take into account being inside or outside Amb Switch Min Value To Check Self-explanatory Amb Switch Max Value To Check Self-explanatory " }, { "title": "Setting up Audio and Working with QSM for Maps", "url": "/posts/mapping_audio/", "categories": "Map Modding", "tags": "maps, audio", "date": "2024-01-09 00:00:00 +0000", "snippet": "Setting up Audio and Working with QSM for MapsIntroductionReady or Not uses a combination of FMOD and an in-house built audio solver called the Quantum Sound Manager (QSM). QSM is a method to help with reverb and audio occlusion from around the map and takes into consideration room sizes, door states and even whether or not glass is broken and adjust volumes accordingly.This guide will explain the requirements to get QSM working within your map and how to integrate it with FMOD ambience and events.The Example Map provided in the Template has QSM set up for a generic house, so check it out if you’re curious.The second part of this guide is Setting up Music Events for MapsSetting up FMOD You do not actually need to complete the steps below to implement QSM. However it is likely you will want to mess with some events if you want to tweak Ambient events. The steps below will tell you how to get it working.Currently the Template has placeholders for the FMOD events - you cannot actually listen to them. If you wish to hear them you will need to: Navigate to C:\\SteamLibrary\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\FMOD and copy the Desktop folder Within your project folder, paste the Desktop folder to ...\\RonTemplate\\Content\\FMODThis should be all you need to do to start hearing FMOD events if you press Play.Actor Overview Any property not listed in the tables below are meant to be private and we shouldn’t modify themReady Or Not Audio Volume A Volume that controls FMOD Events when players are in them, it essentially acts as a trigger volume for child/nested events. Maps require at least one for Reverb and Ambient Sounds that cover the entire playable space ALL FMOD Events should be nested to a Ready Or Not Audio Volume Property Description Reverb Events Unknown use Room Volume These are volumes that are placed within the interior sections of your map. They aim to represent the different shapes and sizes of the rooms they occupy. QSM will use these volumes to determine how the audio will bounce around the room according to the shape of the volumes. They can be comprised of 1 or many different volumes Property Description Room Group ID Used to group multiple Room Volumes covering the same room Reflection Probe Reference to the Reflection Probe object to be assigned for this specific Room Volume (see below) DO NOT Edit the scale of these. If you require to edit the shape, modify the Volume in Brush Edit mode (Shift+4).[NEW] Reflection Probe A probe placed in the middle of the Room Volume to communicate the center and size of the room to QSM There is a Tool available called EUW_Tool_RoomVolumeHelper which will automate the process for you This is not a requirement but Zack HIGHLY RECOMMENDS IT. Property Description Room Size Approxiate volumetric size of the room - can be auto generated with the Blueprint mentioned above Portal Volume These volumes act as portals for QSM to pass through into other rooms. These are specifically placed in doorways, open windows, arches &amp; holes and even managing when glass is broken. You will need to use the modified Door Blueprint BP_Door_Reap_V2_QSM provided in the download above for door audio to function properly. Not doing so will cause the sound to be muffled on one-side of the door. Property Description Is Outside Enable if the Portal connects to the outside Portal Type Used to determine the direction in which sound will pass through the portal: HORIZONTAL for regular use through doors and windows. VERTICAL for upward sound direction through a well or hole in the ground. Attached Objects Add your doors that are within the Volume to this array. DO NOT ADD TO “Doors”! WORK-AROUND: Assign the Portal Volume to BP_Door_Spawner’s Add to Audio Room Portal Breakable Glass Soft Pointer Pointer to the Breakable Glass BP the Portal Volume covers. The Breakable Glass BP is located: Content &gt; ThirdParty &gt; BreakableGlass &gt; Blueprints &gt; BP_BreakableGlass_v01_C. 1 BP per Portal. DO NOT Edit the scale of these. If you require to edit the shape, modify the Volume in Brush Edit mode (Shift+4).Sound_ParameterTransition_V2_BP_C Blueprint This Blueprint is used to help transition between different FMOD and Reverb states. Specifically used when passing through doors and thresholds into other rooms. They can also be used to activate parameters for the music in the game to make it more dynamic. Property Description FMOD Ambient / Music Events Contains the FMOD Events that control the Transitions. For Ambient sound Outdoor-to-Indoor Transitions - choose which map Ambient sounds to go here (will contain *_Amb in the file name, eg: Gas_Amb_V2 INParameter FMOD Parameter taken from the Amb FMOD Event you added above. You can find these values here: Reference - FMOD Parameters OUTParameter Exactly the same as above, but usually suffix with OUT (eg: GasAmbOUT) Reverb IN Select the drop down that best represents the Room Reverb you are moving into Reverb IN Material Select the drop down that best represents the physical material of the room you are moving into Reverb OUT Select the drop down that best represents the Reverb in the room you are entering from Reverb OUT Material Select the drop down that best represents the physical material of the room you are entering from Global Parameter IN The FMOD modifier for Indoor Audio. Set to 1 as a good default Global Parameter OUT The FMOD modifier for Outdoor Audiot. Set to 0 as a good default Use Door Check Feature Enable if the transition between Rooms uses doors. Helps with determining reverb on different door open states. Gobal Parameter Door Check? Leave Disabled. Unsure what it does. Doors Open Unable to modify, but within the official editor, is auto populated via the Construction script. The ‘IN’ part of the BP can be identified by the white spline line inside the box when the BP is UNSELECTED. Distance Along Spline Threshold, Min/Max Range OUTSIDE/INSIDE can be edited but should be left default values. These are spline editing values used for more artistic control on fringe case audio transitions. An example of this is the long corridor in the club that heads towards the dance floor. DO NOT Edit the scale of these. If you require to edit the shape, modify the Box component’s Box Extent. Editing the object scales will mess with the FMOD transitions.[NEW] QSM_Weapon_Reflection_Probe Located Content &gt; FMOD &gt; Events &gt; Levels &gt; Reverbs The best way to describe it is that it’s akin to a sound version of a Map’s Facade. Its a fake Reverb/Echo probe placed outside the map to mimic where sound would Reverb off of back to the player. eg: Bouncing off distance large buildings or a neighbours house, Echos/Reverbs from an underpass or cave outside the map, or just a simulated reverb from a large valley or open field These are more artistically placed around the map to give that je ne sais quoi to the echoes DO NOT Exceed more than 6 of these probes per map. You may usually need less.[NEW] Sound_StarterAmbience_V2_BP_C Blueprint Works very similar to the Transition Blueprint above, however is meant to set the starting values for Ambience through “AmbSwitch”* when a player loads into a map. It covers the player spawns. Property Description FMOD Ambient / Music Events Contains the FMOD Events that control the Transitions. Mainly for Ambience but OST Timelines can be used as well STARTINGParameter FMOD Parameter taken from the Amb FMOD Event you added above. You can find these values here: Reference - FMOD Parameters Starting Global Parameter Just set this to “AmbSwitch” Starting Global Parameter Value The value of AmbSwitch to be set when a player loads in Starting Reverb Select the drop down that best represents the Reverb of the starting area Starting Reverb Material Select the drop down that best represents the make of the materials of the starting area Setting up Audio Before beginning, it is highly recommended that each one of these steps are done within a folder (or sub-level) within the World Outliner to keep things ordered. In this particular case you should be renaming assets (F2) as you create them to keep things managable.Part 1 - [NEW] Important Notes about FMOD EventsAll FMOD events must follow these 2 guidelines so they work flawlessly in the map: Always Disable Auto Activate for all Events Always nest/make events a child of a Ready Or Not Audio VolumeThe reasoning is that there are “way too many instances where FMOD for whatever reason stops the audio for certain events since they load before the game initializes” - Zack c. 2024Part 2 - Ready or Not Audio Volume and Level Ambience &amp; Reverb Drag a Ready or Not Audio Volume from the actor’s tab into the scene. Edit the brush to cover the playable area. It is recommended to scale it just a bit over to encapsulate the some of the outside area as a safety net against players Go to Content &gt; FMOD &gt; Levels &gt; Reverbs in the Content Browser and select the ReverbMaster FMOD Event and drag it into your scene. IMPORTANT: Within the World Outliner, find this Event and drag it ONTOP of the Ready or Not Audio Volume to make it a child actor of it. Decide which Level’s ambience is appropriate for your map and navigate to Content &gt; FMOD &gt; Levels and enter the appropriate level folder. Find the correct Ambient FMOD Event for your specific level listed here: Reference - FMOD Parameters and drag it into your scene. IMPORTANT: Within the World Outliner, find this Event and drag it ONTOP of the Ready or Not Audio Volume to make it a child actor of it, just like before.The Ready or Not Audio Volumes can also be used to control FMOD events that should play persistantly around the map but shouldn’t be heard all the time. e.g. The hum of a fridge that was in a room, but you didn’t want to hear it if you were outside. Another example would be hearing the splash of a water feature outside, but only if you were close to it.You can think of them as trigger volumes to control scenarios by setting them up in the same manner as above, by making any relevant FMOD Events a child actor of the Volume.Part 3 - Setting up Room VolumesRoom Volumes (RV) have a couple of requirements and quirks that you MUST follow: You DO NOT need a RV for the Exterior/Outside portions of your map. Only Interior sections. A room’s RV can consist of 1 or multiple RVs. If you are using multiple RVs for a single room, make sure they share the same Room Group ID. It is best to just keep RV as simple Boxes if you are using many. RVs cannot be concave. RVs of the same ID can overlap, and it is recommended to slightly overlap volumes to be safe. HOWEVER RVs of different IDs CANNOT overlap AND their faces must be touching/meeting (see Figure below). Failure to meet these requirements will mean that QSM will not work correctly. It is HIGHLY recommended that for this process you keep World grid snapping enabled for your entire process to make ‘meeting’ the walls an easier task. Snapping to 5uu is an excellent increment to work fast and accurately. It is recommended that the RVs conform to the shape of the room they are in as closely as possible. It is also recommended that the volumes also slightly extend into the floors, walls &amp; ceilings rather than undershoot them as so the Audio bounces retain their accuracy. Having the RV not extend outside the walls a little bit might cause issues such as footsteps not being heard on the floor or gunshots not being registered inside the room if they hit the ceiling or walls. I have used a spacing of 5uu as a good buffer for my extra extending. Part 4 - [NEW] Setting Up Reflection Probes Go to Content &gt; Mods &gt; Template &gt; Tools and right-click and Run the EUW_Tool_Room_VolumeHelper Click on Make/Assign Probes, it will go through and make and assign probes and place them in their appropriate location to the Volumes they get assigned to. Select all the newly generated Reflection Probes, click on the new Reflection Probes and press Guess Room Sizes (Selected Probe/s) in the tool. Thats it! Though I would double check all the assignments just to be safe.Part 5 - Setting up Portal VolumesPortal Volumes (PV) are relatively easier to set up in comparison to Room Volumes and don’t require as many special rules Drag a Portal Volume from the actor’s tab into the scene. Drag the PV so that it covers the threshold between 2 different Rooms. e.g. Between a doorway or going from an outdoor area to an interior one. Edit the PV in Brush Edit Mode (Shift+4) so that it completely covers the doorframe/window/hole and extends out a little bit. See the picture below for an example: DO NOT Scale the PV, they should only be edited via Brush Edit Mode PVs do not need to be exactly the same size as the hole, and it is fine if it is larger or extends wider/higher than the hole that it covers If the PV goes from an exterior/outdoor area into an interior area with Room Volumes, Enable the Is Outside property In most cases, leave Portal Type to HORIZONTAL. If you are using Breakable Glass, set the Breakable Glass Soft Pointer to the corresponding BP_BreakableGlass_C Blueprint. If you have doors within your PV, you will need to replace any previous version of that door with the newer version provided in the download above located at Content &gt; Mods &gt; RareKiwi &gt; BP_Door_Reap_V2_QSM This contains a workaround that allows us to link the Door and PV together in run-time Select the new Door Actor and within the Door Actor’s properties find Add to Audio Room Portal and use the eye dropper to select the appropriate PV. Not doing so will cause the door’s audio to be muffled on one side of the door when interacting with it. Zack recommends to approach doing Portal Volumes by completeing the Outdoor-to-Indoor thresholds first for testing. You will need to make sure that all of these thresholds are covered for QSM to correctly identify the Interior and Exterior areas.Part 6 - Setting up Sound_ParameterTransition_V2_BP_C BlueprintsPart 6.1 Placing the Transition BP Drag a Sound_ParameterTransition_V2_BP_C into the scene, located within the Content Browser at Content &gt; Blueprints &gt; Sound. Identify which side of the BP is the IN side by UNSELECTING the BP and noting down what side the white spline line inside the box is on. The side the line is on is your IN direction. When you select the BP there will be splines on either side. Rotate the Transition BP appropriately so you know which part of the BP is IN &amp; OUT You will likely need to resize the BP, but it is imporant that you DO NOT SCALE it. To change the size select the Box Component of the BP and adjust the Box Extent values instead. The size of the box is an artistic choice but note that as soon as a player steps into it, the transitions will begin. So take careful consideration to not place them in areas that do not make sense logically. The spline values determines the ratio in which the volume of the ambience changes when moving through the BP. You should make sure that if you edit the Box Component, you also edit the Spline Component points on either end to be WITHIN the Box Component You should only need to change the X value for the spline point’s Location Transition BP’s require different property settings for Outdoor-to-Indoor and Indoor-to-Indoor thresholds. Please read the requirements properly.Part 6.2 Properties for OUTDOOR-to-INDOOR Transitions Add (+) an element to FMOD Ambient / Music Events and add your Ambient Event you selected from step 1. For the same element, type the corresponding INParameter &amp; OUTParameter that is defined within the same FMOD Event These do not have a consistent naming convention, however the OUT parameter is usually named OUT or EXT Eg: Gas_Amb_V2 is GasAmbIN &amp; GasAmbOUT, while Valley_Amb_V2 uses ValleyAmbINT &amp; ValleyAmbEXT You will need to locate these identifiers defined here Reference - FMOD Parameters Select the appropriate reverbs for your rooms for ReverbIN &amp; ReverbOUT For FMOD Global Parameter type in exactly: AmbSwitch Enable Use Door Check Feature if your Transition BP contains doors You cannot add elements to Doors Open, this is supposed to self-populate via the BP’s construction script. Se the Global Parameter IN to be set to 1 &amp; Global Parameter OUT to be set to 0Part 6.3 Properties for INDOOR-to-INDOOR Transitions Select the appropriate reverbs for your rooms for ReverbIN &amp; ReverbOUT Thats it! You don’t need to modify any of the other properties like above. It is actually recommended not to modify anything else as the BP has checks that will mess up audio for smooth Interior transitions.Part 7 - [NEW] Breakable GlassBreakable glass is extremely easy to implement but they need to use Portals to allow sound to allow sound pass through when they’re broken. Create a Portal Volume that tightly fits the area where the breakable glass will go Drop a BP_BreakableGlass_v01_C (located: Content &gt; ThirdParty &gt; BreakableGlass &gt; Blueprints) into your scene You can select the Material and Mesh for the Blueprint to use Select the Portal Volume you wish to match with the glass and under Breakable Glass Soft Point use the eye-dropper to select the Breakable Glass Blueprint in the scene. If your Breakable Glass crosses the threshold of Indoor-Outdoor (like most windows do), Enable Is OutsidePart 8 - [NEW] Placing down QSM_Weapon_Reflection_ProbesAs mentioned in the Actor Overview, these are akin to a sound version of a Map’s Facade. It’s a fake Reverb/Echo probe placed outside the map to mimic where sound (specifically gunshots) would echo/reverb off of back towards the player.Examples: Bouncing off distance large buildings or a neighbours house, echos/reverbs from an underpass or cave outside the map, or just a simulated reverb from a large valley or open field. These are more artistically placed around the map to give it that je ne sais quoi. There really isn’t a science to it, just where you think some reverb and echoes should come from.To set them up: Place a QSM_Weapon_Reflection_Probe in your map from Content &gt; FMOD &gt; Events &gt; Levels &gt; Reverbs. As with all FMOD Events, nest it in a Ready Or Not Audio Volume and Disable Auto Activate. That’s it!Some additional notes, Zack mentions you can place up to around 6 probes in your map, but you shouldn’t exceed 6. Additionally only 2 probes are active at a time based on proximity to the player. They can be nested in a RoNAudioVolume, but do not need to be physically inside it.Part 9 - [NEW] Using the Sound_StarterAmbience_V2_BP_C BlueprintThese work very similar to the Transition Blueprints, however is meant to set the starting values for Ambience through “AmbSwitch”* when a player loads into a map. Place a Sound_StarterAmbience_V2_BP_C into your scene and make sure it covers the PlayerStart You do not need one BP per PlayerStart (as one can cover many), but it really should be 1 BP per location Do not just encompass the map in one BP, it should be as localised as possible. The rest of it works the same as a Transition Blueprint, just select the Event to edits and the starting AmbSwitch parameters and values that you wish.Tools &amp; TestingRareKiwi has created a bunch of useful tools to help test and debug QSM and OST Values. All these tools are provided in the Blueprint and Tools folders.BP_AudioPropagationQSMTesterContent &gt; Mods &gt; Template &gt; BlueprintsThis is a BP that you place anywhere in your level. When you play your level in the game it will constantly fire a gun shot so you can debug and see if QSM is working correctly. Control Action P Move Here [ (Left Bracket) Trace there ] (Right Bracket) Occlusion Type \\ (Backslash) Toggle Active Pressing \\ (Backslash) during the mission countdown will crash RoNBP_AudioSamplerContent &gt; Mods &gt; Template &gt; BlueprintsWhen placed in your level, it allows you to test the effect different FMOD Parameters have on FMOD Events. This is meant to be used within the Editor. You can changed what Event to preview by selecting the FMODAudio component in the Details panel. You can use any FMOD Event in here; Timelines, Ambients and regular sound effects!When you are playing in the editor, the Blueprint will auto-populate the sliders to show what you can edit. However the sliders will not update the audio automatically and you will need press the Play button for each change you make.Example Use: The FMOD event Ridgeline_Cicadas can be controlled by AmbSwitch to lower the volume for entering interior sections. To would be hard to figure out the correct values to use without lots iterative builds, but using the AudioSampler allows us to quickly identify the values needed without leaving the editor.EUW_Tool_RoomVolumeHelperContent &gt; Mods &gt; ToolsUsed to help keep track and change the Room IDs of Room Volumes. It creates a list of all Room IDs you have and select specific IDs.EUW_Tool_ListRoomIDsContent &gt; Mods &gt; ToolsUsed to help keep track and change the Room IDs of Room Volumes. It creates a list of all Room IDs you have and select specific IDs.What Next? Music!If you got QSM all set up, you should look at the next part of the guide: Setting up Music Events for Maps to allow you add music to your map and let it react dynamically to combat and other parameters." }, { "title": "(OUTDATED) Getting Started with Ready or Not Mapping in UE4", "url": "/posts/mapping_gettingstarted/", "categories": "Map Modding", "tags": "maps, essential, introduction", "date": "2023-12-28 00:00:00 +0000", "snippet": "[OUTDATED] Getting Started with Ready or Not Mapping in UE4 [1.0 RELEASE] This guide is outdated with the release of DLC1 Home Invasion and the engine being upgraded to UE5. Please click here for the updated guide: Getting Started with Ready or Not Mapping in UE5IntroductionReady or Not is currently Unofficially supported by dedicated modders. Due to the hard work of them we are currently able to get around 80-90% of the experience that Official Maps have; there is expected to be a little bit of Jank when creating maps.This guide will step you through the basic set of requirements needed to build custom levels for Ready or Not and complete your first iteration by getting your map into the game. Ready or Not mapping REQUIRES that you download and use Unreal Engine 4.27.2. Do not download or use any other version. If this is your first time creating a map, be aware that the level of experience to create something functioning is considered Intemediate. It is recommended that you spend some time watching and learning some beginner videos for UE4 on youtube before you start asking too many newbie questions.If you need help or have any questions, don’t hesitate to join the RoN Custom Maps Discord!The Level Design Cycle for RoNWe currently provide a template project that contains all the gameplay features/blueprints needed to make RoN maps here: Installation.For the Level Design process, you pretty much do it all within Unreal Engine, and can use whatever (reasonable) method you want to create your level.It is important to note that currently we cannot test gameplay within Unreal Engine and can only do it within the Game. To actually play the level you need to pack your level into a deployable .PAK file. More info here: Cooking &amp; Packaging &amp; InstallingDevelopment ExampleIf you would like to see what it’s like to make a map for Ready or Not, I recorded my entire development for Hell Comes to the Hills.YouTube Playlist: Ready or Not: Custom Map Development by DeltaInstallationUnreal Engine Download and install the Epic Launcher. Open the Launcher, go Unreal Engine on the left side bar, then Library along the top toolbar Under Engine Versions press the + icon and next to the Version Number, click the drop down and select 4.27.2 and InstallThe Template Project Currently we have a pre-release project that you NEED to use for maps to work for 1.0. Do not use the Covered Bones Template available on Nexus. THIS IS LIKELY TO CHANGE A LOT, TO KEEP UP TO DATE, PLEASE JOIN THE DISCORD. Create a Folder anywhere and name it whatever you want. This will be the folder you need to extract the following files into. I will refer to this folder as RoNTemplate. Download and Extract the following into RoNTemplate https://drive.google.com/file/d/17uyZ_hrklBIN1ci88GajcnT1pOeFQJGx/view?usp=sharing https://drive.google.com/file/d/1BsavVwAYh6kq7hUs9wD3o2A5_nY6rWn6/view?usp=sharing Download the following Hotfix. DELETE your /plugins/ folder within RoNTemplate and then Extract the contents of the hotfix to RoNTemplate https://drive.google.com/file/d/1IAD9qjTfN2JJ5yBUZ3R9Jhzi8R0YdgCS/view?usp=sharing Open RoNTemplate and open the ReadyOrNot.uproject. This will launch the Project and may take a couple of minutes to load if this is your first time using Unreal. Just be patient. HELP! I Get 100s of errors when I load up the project!This is normal, it’s just missing some game files that you can extract later on. We also don’t have access to everything. Any errors you get on start-up are fine and will not give you any issues, provided you followed the steps so far exactly.Your First Map If you have seen previous YouTube tutorials it may have said you need to set up the Render Settings, or modify the Packaging settings. With the latest version of the Template, you do not need to change or extract any settings. You should be good to go from the first time you launch.The Folder StructureBefore we continue, it is very important to understand the folder structure of an Unreal Project.Unreal uses this concept of a Content folder, this is where all the game content and maps for the game reside (located at: ...\\RoNTemplate\\Content).When you install a .PAK file you are essentially adding or overriding assets in Content. Any change you make here will likely affect other mods that people use. This a more common occurance when a lot of us are using the same Marketplace or Quixel/Megascans assets.To prevent us from stepping on each other’s work, It is highly suggested that you create a directory for yourself within the Mods folder and place ALL your assets (including 3rd Party/Marketplace/Quixel/Megascans) there. The Mods folder should look like the following:Content Mods Blueprints Reap YourUsername You will see other folders in here such as Blueprints &amp; Reap. DO NOT edit the files in here. Since you will be visiting your folder frequently I would consider changing the the folder color and adding it your favourites within the Content Browser. You can do this by simply right-clicking the folder here.Bare Essentials for Gameplay Following the previous steps, go to your ...\\Mod\\YourUsername directory in the Content Browser and create a new Level then open it Whatever you name it will be what it shows up as in-game Once opened, on the toolbar click on Blueprints &gt; Open Level Blueprint Under Class Defaults, check the details panel and click on Item Data and add the ItemData asset Click Compile, and you can save and exit the window Under the Place Actors tab, chuck down a Geometry floor and a couple of walls using boxes to act as a space to play in If everything is black, press Alt+3 to switch to Unlit Mode Under the Place Actors tab, go to All Classes and search for and place down the following: 5 Player Start Actors This is where your Player and Team Spawn Nav Mesh Bounds Volume Required for your AI to function, whatever this covers will be where your AI can walk World Data Generator Actor This will build the navigation and gameplay elements when you load your map Roster Scenario Spawner Actor This creates your gameplay objectives and spawns In the Content Browser, navigate to ...\\Content\\BlueprintSpawners\\PostRelease and place down 2 BP_AISpawn_Reap_V1 Blueprints Technically not needed, but without it the map will automatically complete when you play it and you wont be able to test it. You can use the AISpawn actor, but Reap’s one has some better control After you place it down in your map you can search it in the Place Actors tab. Additional ThingsLightingCurrently your level doesn’t have any light, so we should set up the basic stuff so we can actually see when we playtest it. Add the following: Lightmass Importance Volume and adjust it to cover the playable area 1 Directional Light to act as a Sun/Moon Set it to Stationary for dynamic shadows to work properly Under Details &gt; Atmosphere and Cloud enable Atmosphere Sun Light 1 Sky Light Actor 1 Sky Atmosphere Actor 1 Exponential Height Fog Actor 1 Sphere Reflection Probe that encompasses the map Without reflections the models/guns in game can look flat and not properly lit. If you set your Directional Light to be the Atmosphere Sun Light, you can use Ctrl+L to change the direction of your sun nowAISpawnsThe 2 BP_AISpawn_Reap_V1 blueprints that we placed down are not configured yet, so lets do that by adding a Civilian and Suspect: Select an AISpawn and under AISpawn &gt; Spawn Array press the + symbol Expand the new array element and also expand Spawned AI This is where you choose what AI to Spawn To begin with change the Data Table to AIDataTable_Gas &amp; the Row Name to Civilian_Gas_Employee_01 Select the other AISpawn and follow the same steps but change the Row Name to Suspect_01_ShotgunYour AISpawn details should look something similar to this: You can select any Data Table and Row Name for your map and you are not restricted to 1 Data Table.DoorsDoors are pretty simple to place down into your map. In the Content Browser, navigate to ...\\Content\\BlueprintSpawners\\PostRelease and place down a BP_Door_Reap_V1 blueprint Within the Details panel, change the Door Type &gt; Row Name to the sort of Door you would like For testing purposes I like to use Wood_Door_Painted The basic Template does not include the Static Meshes so you can preview the door. To get them you will need to follow the steps in Using Ready or Not Game Assets and Content For the AI to actually use doors and stack up properly, it seems the door needs to be connected to an actual room-like structure (ie: enclosed by 3-4 walls). It’s unclear on the exact requirements at the moment, but this seems to be one of them.LevelDataLevelData will show you how your map will look in the Level/Mission Select screen. Currently LevelData does not work and we are waiting for a patch from VOID.Building / BakingIf you’ve been following along so far, then you probably have not built your map. Building a map fixes up changes in Geometry &amp; Volumes, Lighting &amp; Reflections and Pathing. You should do it whenever you want to update/preview changes in your map.To build your map you simply press the Build button on the toolbar. Once the build completes, you should File &gt; Save All Building times can vary, but the largest determining factor is usually Lighting. As map size increases and the quality of Lighting is changed, builds can take anywhere from 2mins all the way up to 6hrs and longer. At the moment the map should probably only take a couple of seconds.CookingCooking is the process of turning the project into content that can be deployed on other machines. We also only want cook content that is only important for the map to keep file size small. We need to configure this first: Go to Edit &gt; Project Settings and on the side tab select Project &gt; Packaging Under Packaging &gt; List of maps to include in a packaged build you should see an element that shows the directory for Reap’s Example.umap. We want to replace this entry with the directory of our Map.umap. If you do not see List of maps to include in a packaged build you may need to press the arrow that looks like this: Press the + and create another entry here and navigate to your map’s BuildData, it should be in the exact same location as your map. You do not need to change any other settings and it should look something like this: Make sure you Save All before proceeding Select File &gt; Cook Content for Windows This could take some time for your first cook as it compiles all the shaders. Just be patient. You should hear it succeed, but a message will not remain on screen when it completes. If it failed the notification will stay on the screen. A common cause of a failed Cook is usual a result of including already Cooked content from this process, so make sure you haven’t included it in any of your directories. Even creating materials that reference cooked textures will create a cook to fail.Packaging &amp; Installing your MapPackaging will turn our cooked content into a single compressed file that we can actually use to play in game and distribute to other people. There are a bunch of Unreal packers out in the wild, but only use the following method for maps. Create a folder somewhere to act as your staging location for packing, name doesn’t matter but I use Paking. Within this folder create a new folder using the following naming convention: pakchunk99-YOURMAPNAME the 99 after pakchunk indicates the load order of paks. We keep maps at 99. Replace YOURMAPNAME with whatever your map’s name is. This will not show up in game, but will help identify your map/mod to people downloading your mod. Sometimes it is required to append _P at the end of the name if you are replacing files (i.e. P for Patching). But since you shouldn’t be replacing any files this is unneeded. Go to C:\\Program Files\\Epic Games\\UE_4.27\\Engine\\Binaries\\Win64 and create a .bat file here with the following arguments: @if \"%~1\"==\"\" goto skip @setlocal enableextensions @pushd %~dp0 @echo \"%~1\\*.*\" \"../../../ReadyOrNot/\" &gt;filelist.txt .\\UnrealPak.exe \"%~1.pak\" -create=filelist.txt -compress @popd @pause :skip Create a Shortcut to the .bat file you created and move it to your staging folder from step 1. Navigate to your Template/Project folder and go to: ...\\RoNTemplate\\Saved\\Cooked\\WindowsNoEditor\\ReadyOrNot and copy ONLY the Content folder Paste your Content folder into your pakchunk99-YOURMAPNAME folder Drag your pakchunk99-YOURMAPNAME folder onto your .bat shortcut. A command window will pop up and tell you when it is complete. If successful you should have a new file in your staging directory named pakchunk99-YOURMAPNAME.pak Copy your pakchunk99-YOURMAPNAME.pak to C:\\SteamLibrary\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\Paks Your map should now be available in the gameThis is an example of what a Staging folder can look like: You will be jumping between these folders a lot, I really recommend putting your Staging folder, Project Cooked folder Ready or Not Pak directory to your Quick Access bar.Testing your Map I highly recommend that you download the Console Unlocker - Camera Mod by QuantumNuke75. It will give you ability to use a Free-Look camera and also use basic Unreal Engine Console Commands. Both functions are extremely helpful for testing.The easiest way to test your map is to simply load up the game and select it from the Mission Select screen. If all works well then it should take a couple of seconds to build WorldGen and plops you into the map.If you installed the Console Unlocker mod, you can also load into it faster by hitting ~ and typing open YOURMAPNAME and pressing execute. YOURMAPNAME should be what the .umap name is called within your project. NOT the package name. For Hell Comes to the Hills the command for opening it is open Hell_Comes_to_the_Hills.Common Issues with a Map not LoadingMake sure you did the following: Using the up-to-date version of the template linked above in this guide. You are using the packing method described above in this guide. Only include the Content folder from \\RoNTemplate\\Saved\\Cooked\\WindowsNoEditor\\ReadyOrNot You have all the actors mentioned in Bare Essentials for Gameplay.If your map is still not not launching, then you may want to reach out for help on the Mapping Discord linked above.Updating your Map after PlaytestingAnd Voilà! You’ve just gone through your first iteration of RoN Mapping!There are just some final important steps needed to know when you re-cook and package your map to test updates: After you recook your map, it is recommended that you delete the Content folder within your staged pakchunk99-YOURMAPNAME folder instead of overriding it. Overriding your folders may leave residual files and settings that may mess with your playtest BEFORE you launch the game. Navigate to C:\\Users\\USERNAME\\AppData\\Local\\ReadyOrNot\\Saved\\SaveGames and delete the WorldGen.sav file that has the same map name as your map (e.g. Hell Comes to the Hills filename looks like Hell_Comes_to_the_Hills_WorldGen_40173.sav). This step is critical! Each time the game launches your map for the first time, it generates World Data and stores it so the map launches faster the next time you play it. However the game does not know when your map has been changed. So you will likely be playing on a map with outdated build information resulting in quite a few bugs. The WorldGen contains information such as how doors are positions and connected, room sizes and layouts, stacking points, navigation, hiding spots and cover and a probably a lot of other things we don’t know about yet. So it is important to make sure you generate new World data with each iteration! Just like with the other folders, it is recommended you add the SaveGames directory to your quick access, as you will be visiting it quite a fair bit!Using Ready or Not Game Assets and ContentIf you want to use RoN game assets you will need to extract them yourself using umodel: https://www.gildor.org/en/projects/umodelTo get the assets: Open umodel and select your ...\\ReadyOrNot\\Content\\Paks folder Click Tools &gt; Scan Content and select Unreal Engine 4.27 Tick Flat View in the top-left corner. Sort by Stat (Static Meshes) Select all with Stat = 1 Select Tools &gt; Save Selected PackagesYou can repeat steps 4-6 for Skel (Skeletal Meshes)Once you are done copy the saved files to your project. For umodel the Game folder is the Content folder for your Project. So you can just copy the contents of Game into your Content folder.Restarting the Editor may take some time as the project discovers and indexes all the cooked assets.You can simply place down these meshes in your level but they may not have materials. However, when you load the game they will be textured fine. This is just a limitation we need to work around. Make sure you are keeping the directories the same from Game to Content. Cooked assets are the actual game files the game needs to reference for them to work. Do not put them in your Mods\\Username folder. You may want to repeat for some Tex (Textures) as well. But be warned that you will not have the materials to display onto the meshes. You will need rebuild the materials from scratch, and saving the Textures is not usually worth the time and hassle. It is generally not recommended to extract/save everything as it will take a very long time to do and will likely crash/fail to do so. Putting ALL the assets into your project will also significantly increase file size &amp; launching time when you open UE. If for some reason the assets are not loading double check the project settings so that it can use cooked content: https://docs.unrealengine.com/4.27/en-US/WorkingWithContent/CookedContentVideo Guide by Reap: https://www.youtube.com/watch?v=-xQKyV7_6fEWhere to Next?We have other guides that cover some more in-depth aspects of mapping that you can check out below:Additional Game Mechanics COMING SOONMap Optimization COMING SOONSetting up Audio and Working with QSM COMING SOONSetting up Music Events for Levels COMING SOON" }, { "title": "Quick Cook Setup", "url": "/posts/quickcook/", "categories": "Map Modding", "tags": "maps", "date": "2023-01-18 23:00:00 +0000", "snippet": "This is a guide to setup and use the quick cook editor scripting widget.The widget automates repetitive cooking, copying, paking and starting the game to load a specific level. Also supports separate profiles for maps or mods.Quick Cook Setup: Download the .zip containing the widget and python dependencies. Extract the .zip contents into your UE4 Project’s content folder so that you have two sub folders as shown; .../Content/QuickCook .../Content/Python Restart UE4 if it was open to ensure the new python modules are available. In UE4; Navigate to /Content/QuickCook/ in the content browser. Then right-click \"QuickCook\" and select \"Run Editor Utility Widget\" Fill out the configuration to match your setup for: Project Folder: Should be your covered bones folder etc containing the .uproject Staging Folder: Should be the parent of the after-cooking copy folder which you use with UnrealPak.exe to create .paks. This should be the parent folder of your pakchunk99-YOURMOD folder etc. Unreal Engine Dir: Should be where your engine files for UE 4.27 are located. Game Folder: Should be the top directory of your Ready Or Not game installation. {: .left } This configuration will be saved and loaded automatically to your UE4 Project’s directory at;...\\Saved\\QuickCook\\QuickCook.cfg You should add /Content/QuickCook/ to your “Directories to never cook” in your project settings.Quick Cook Usage: This widget doesn’t modify or bypass your project’s “Directories to never cook” or “List of maps to include in a packaged build” Therefore, please ensure you have manually cooked, named your staged mod folder and paked it successfully before using this tool.Profiles: Open your map. Opening a map will try to load a profile with matching name. To create your own, under “PAK NAME” enter your staging folder name (i.e. your pak name without .pak) In the right field enter your map name exactly as seen in the top-left tab or content browser. Press the Save button. Profiles are saved as .ini files in the project’s ...\\Saved\\QuickCook\\ Add the folders you wish to be synced when pressing the Copy button from ...\\Saved\\Cooked\\ to the profile’s folder within “Staging Folder”Although you can’t drag folders from the content browser, you CAN drag an asset within on to the None next to “Drag Here to Add” to quickly add their parent folder. Press Save Folders are copied relative to .../Saved/Cooked/WindowsNoEditor/ to allow copying Engine content if needed.The popular pak.bat includes /ReadyOrNot/ which these tools wont work with.To modify an existing staged folder simply make sure your cooked copy of /Content/ is inside a /ReadyOrNot/ folder.Eg; .../pakchunk99-YOURMOD/ReadyOrNot/Content/To modify your pak.bat simply replace \"../../../ReadyOrNot/\" with \"../../../\" The Copy Button uses the dirsync python command syncThis syncs folders one way and only if files have changed data rather than by date to increase speed.Usage Notes: For Play to work correctly ensure QuickMap is installed and configured. Check box state and game mode selection state is saved to config, not profile. Check boxes below Copy, Pak and Play allow the tool to continue after the button to the left has finished it’s action.This let’s you in one click, press cook, then (after some time) automatically spawn in your level in game with a chosen gamemode. Freemode skips the 10 second game countdown and disables AI. No loadouts are loaded. Teleport requires a /QuickCook/QuickTeleport blueprint placed in your level. If ticked, it will move your player in Freemode to your UE4 viewport camera’s location Windowed requires a /QuickCook/QuickTeleport blueprint placed in your level. If ticked, it will run r.SetRes with the selected optionsQuickMap SetupQuickmap is an empty level that can be loaded before the game’s MainMenu level to enable extra game launch parameter options such as level loading. Download the pakchunk99-QuickLoad.pak from here or Nexus Mods or mod.io If in a .zip, extract it, then copy it your game’s pak folder like any other mod. /Ready Or Not/ReadyOrNot/Content/Paks/ Open %localappdata%\\ReadyOrNot\\Saved\\Config\\Windows\\Engine.ini [UE5] This is now \\Windows\\ instead of 4.27 \\WindowsNoEditor\\ Add an empty line then add this override; [/Script/EngineSettings.GameMapsSettings]GameDefaultMap=/Game/QuickCook/QuickMap.QuickMap Save the Engine.ini Be sure to remove this line, or update QuickLoad after a major update if the MainMenu level name changes." }, { "title": "Map Modding (OUTDATED)", "url": "/posts/mapmodding/", "categories": "Map Modding", "tags": "maps", "date": "2022-08-07 12:00:00 +0000", "snippet": "Map Modding This version of the mapping guide is outdated since the release of 1.0. For an updated guide and download please check out Getting Started with Ready or Not MappingSpecial thanks to:ACowBoyBishop#7664 and Vegriv#8646 for testing and help! Thanks to matthew9324#3567 for C++ help and RoN Dev Zack Bower#0466 for FMOD integration.Guide written by The Real Sourc3#7480.If you need help don’t hesitate to visit the RoN Custom Maps Discord and tag me :)I heavily advise to watch the videos related to the newest Covered Bones template on Nexus.Folder StructureFolder structure in UE4 4.27.2 needs to be as shown under to work. Content is the base folder your UE4 projects starts from.YourProjectName is only a placeholder for what you name your project when you make it in the New Project menu in Epic’s UE4 Launcher.The project name for the Meth house map for example is listed as RoN_Meth.To make a map you should start by downloading the newly updated Covered Bones Mapping template from NexusIt includes all the C++ files and Folder Structs like listed below and should provide you with a strong basis to start map modding.The Folder struct below is only the nessescary files required for the map to work (using all features) but the Covered Bones includes more files for conveniency.To distinguish the old Bare Bones from the new updated template, it’s now called Covered Bones.Content BlueprintSpawners BP_Door.uasset bp_door_reap.uasset CustomGameModeOverride.uasset BP_GameModeOverride.uasset BombSpawner.uasset BP_SpawnEvidence.uasset BP_SpawnActor.uasset BP_SpawnSelectedActor.uasset Blueprints DataTables DoorDataTable.uasset DoorType.uasset TrapDataTable.uasset AI_DataTable.uasset AI_DataTable_V3.uasset AI AI_DataTable_Club.uasset AI_DataTable_DataCenter.uasset AI_DataTable_Dealer.uasset AI_DataTable_Farm.uasset AI_DataTable_Gas.uasset AI_DataTable_Hospital.uasset AI_DataTable_Hotel.uasset AI_DataTable_Importer.uasset AI_DataTable_Meth.uasset AI_DataTable_Penthouse.uasset AI_DataTable_Port.uasset AI_DataTable_Ridgeline.uasset AI_DataTable_Valley.uasset Environment BP_Door_New.uasset IncapacitatedHuman.uasset Gameplay COOP BP_BombActor.uasset COOPModes GM_COOP_ActiveShooter GM_COOP_BarricadedSuspects GM_COOP_BombThreat GM_COOP_HostageRescue GM_COOP_Raid Games GM_COOP.uasset Logic MethLogic BP_Evidence_Meth_Contraband.uasset BP_Evidence_Meth_Contraband_2.uasset PortLogic BP_Evidence_Port_Dossier.uasset RidgelineLogic BP_Evidence_Ridgeline_Ricin.uasset ValleyLogic BP_Evidence_Valley_HardDrive.uasset BP_Evidence_Valley_HardDrive_02.uasset BP_Evidence_Valley_Laptop.uasset Sound Unused ModMusic_BP.uasset ModSound_BP.uasset E_WorldGenType.uasset FMOD // Sound banks and events located here Mods YourProjectName (CoveredBones) Levels // To make your level appear mod main menu place it here: YourMapName.umap YourMapName_BuildData.uasset MoreDoor.umap MoreDoor_BuildData.uasset // Custom models, materials and textures are placed here in sorted folders. ReadyOrNot Data // Misc useful data items are located here Project SettingsProject settings are important when making maps. They tell the engine how to interact with the assets and how they are cooked. When making maps you will need to change some of these to fit what content you want to include in your map. Some of the stuff are not optional. They will break certain elements of your game if they’re cooked. Don’t worry though - it’s nothing permanent.Go to the top to Settings drop down button and pick Project Settings (2nd from the top).Navigate to Packaging and scroll down to Ini Section Blacklist - there will be a tiny bar with an arrow on it to expand the menu further. Click on it and scroll down to Directories To Never Cook and add 2 array elements. Edit them with the 3 dots to this:The Folders in the Bare Bones Template that need this treatment are:(!! Ignore the /Game/Materials and /Game/ReadyOrNot/Assets/Shared if they’re not there !!)For custom materials to work we need to edit some Packaging settings that can be found in Project Settings.Look for the tick box called Share Material Shader Code and make sure it is NOT ticked. It should be ticked off in the BB template by default.You’re then free to use all kinds of materials with both translucency and emissive properties without the need of instancing game master materials, making Quixel and Megascans importing a lot more user friendly.GameModesBlueprints must be constructed manually as no blueprints can be imported from the base game.With the Bare Bones project the gamemode blueprint will be called GM_COOP.If you don’t have one, create an empty GameMode from the GameMode base class and rename it, then place it in the corresponding folder structure listed above.GameMode Override:At the top of your editor screen you will find the Blueprints tab, where you can edit Asset Blueprints and World Blueprints. In order for your game to work you must override the default gamemode and pick World Override: and pick the GM_COOP gamemode blueprint class.I have added a new way to set the gamemode as by default the game comes with Barricaded Suspects and Raid as the only available game modes. This tool is found in BlueprintSpawners and is called GameModeOverride. It does what it says - override the gamemode - and thus that gamemode will be the only gamemode for the level, despite what it says on the map in the lobby. This asset is dragged out somewhere in your level (doesn’t matter where) and you select your intended game mode and provide the literal map name as it appears top left on the tab in the editor. If you want the game to be Bomb Threat you should also add up to 2 BombSpawner.uassets in your level that spawns vanilla game defusable bombs in the level.World Geometry:If you make a new level instead of using the template’s included test map, just note that the standard level of UE4 includes a floor which is a static mesh. This will usually not show up in-game and you’ll fall through the world upon launch.If you want static / physics meshes in your world you must either reference base game meshes under the ReadyOrNot folder or provide your own in the correct folders.For prototyping or if you don’t have access to a lot of high poly assets it can be desirable to use BSP brushes. These are usually just convex hull geometry that you can piece together. You can actually make most of your map with this, then add models to enhance the level afterwards. I included some basic materials too to get you going.To make a walkable floor you have to use the Place Actor menu’s Geometry tab and choose the Box primitive.Use the right side menu to adjust the size of the floor or use the Brush Editing Mode (Shift + 4) to adjust the shape and size of your primitive.You only really need a floor, but it can be favorable to include walls and ceilings to get a sense of scale as well as for AI generation.A trick would be to use the included SM_Farm_Door_A door model to align doorways and ceilings for the scale.LightingInclude at least one light if not using the “sun” light standard to the scene. This helps bake the correct lightdata on your geometry. Without any light you can sometimes recieve weird shadow artifacts or weird colors. This also helps those weird people who don’t put any attachments on their guns.I added the GoodSky asset pack from UE4 Marketplace into the template, because it’s really handy to configure day/night using it; even adding a thunderstorm in a few clicks.In addition to that you’d need to place a Directional Light into the level for the actual light.You can add multiple lights in your scene, but adjust the Attenuation Radius so that too many don’t overlap. UE4 is very limited when it comes to light overlapping, so you’ll need to tinker with this to get a good feel for it.If a red X is displayed on the light it will not render in the final product or be glitched.World Generation and AI NavigationWorld Gen:This is probably one of the more complex steps as it involves messing a bit with the World Blueprint so I made the title a bit bigger.In the new update the devs added world generation to custom maps so I will need to test a bit with that, but the previous way to go was to include RosterScenarioSpawner and WorldDataGenerator C++ Actors in the map so that they would generate these points. The Bare Bones template should already have this included but if it doesn’t or you create a new map from scratch you’ll need to add these manually by going to the bottom of the Content section and look for C++ Classes and dragging these out into your world.(Still need to add more info to this chapter - unfinished)Navigation:To make the AI know which part of your map is intended to walk on you’ll need to set up a volume that touches the floor that you want them to be able to navigate.This volume is called Nav Mesh Bounds Volume and can be found in the Volumes Tab in Place Actors. This volume should ideally intersect the walkable floor. Navigation area only generates inside of this volume so make sure that all your walkable floor is encompassed in this volume. It also doesn’t matter if the volume is sticking out underneath of the floor or is not the same size, the engine pulls navigation info from the Project Settings when it generates paths.After building the paths from the Build button you can display the walkable paths generated by pressing P.Adding Props / Models Locate the prop[s] that you want to use on your map. These will have the .uasset format as any other file. However, make sure the .uasset you are looking at is the static mesh, not texture file or anything else. You can verify this by opening that file in UModel. If the class says StaticMesh, you’re good to go.An easier route is to download the Mapping Reference Project made by RareKiwi and delete the assets from folder after cooking. Make the folder struct the same as the asset file path. Go to Place Actors &gt; Basic and drag the Cube to the Content Browser and click Copy Here. You can use this in your level wherever and upon loading into your map, this will turn into the appropriate asset. Only go beyond this step if you want to see the asset within the editor. Export the static mesh you want to use as a .psk using UModel. Using Blender and the .psk plugin for it, export the model as a .fbx. Import the .fbx into UE4 with the same name as the asset you are attempting to use within your map. Make sure the file is in the same directory as the sibling file in the game files.Adding DoorsTo get a door into the game you place all the provided files into the folder structure as shown above.Set up the BP_Door in the Blueprint Editor under BeginPlay like this:Blueprint Pastebin - BP_DoorThis will make a BP_Door_New entity be spawned at the location of this blueprint with all the provided variables from BP_Door.The BP_Door gets these variables from the DoorDataTable and the TrapDataTable - so if you can’t see these variables be sure to look on the right side and see that the Data Table is linked to the blueprint.The red arrow in the BP shows which way the trap will be placed and marks the back side of the door. Place an instance of BP_Door onto the map and change the desired values: Door Type: Use the DoorDataTable in the data table block and select the wanted door. Trap Type: Doors can have pre-attached traps. The types to choose from comes from the TrapDataTable and are Explosive, Flashbang, Alarm, NoTrap. Note that the NoTrap doesn’t disable the trap, it makes it random. Lockchance, can be 0.0 - 1.0 We’re unsure if this value does anything, but we would expect higher probability of locking the closer to 1. Lockable: If the door can be locked or not. If you want a door to always be open you tick this box to False. NoSpawnTrap: If ticked it will disable any traps from pre-attaching to this door. Leave unticked if you want the TrapType to propigate. UseBrokenDoorMesh: We’re unsure if this does anything other than spawning the ruined door from the training course in the lobby map. MinOpenClose / MaxOpenClose: Probably has something to do with the max angle the door can swing, but I have yet to notice any difference after changing these values.. Evidence ActorsIf you’ve played the game for more than 5 minutes you may have come across the different kinds of evidence that you can pick up in the world. These are the smaller kinds of objects that are linked to drugs, videos/photos, lists and more. In the new Covered Bones there is a provided blueprint to spawn these kinds of actors.Simply drag out one BP_SpawnEvidence.uasset per evidence actor into your desired location in your map, and select your preferred evidence (oh and due to my negligence the white and red meth bags were swapped on the list - whoops)The evidence types should have intuitive icons when you select between them :)MultiplayerMultiplayer works by default if you place enough spawn points in your map. This spawn point is called PlayerStart and you’ll need at least 5 for normal multiplayer function.Building and CookingAt this point the map should be ready for rendering and packaging (you don’t really need doors but maps are very lacklusting without).You firstly need to Build the data into the map by pressing the Build button at the top of the screen. It will take some time to finish.Once it is done you can cook the files.You cook the map so that the game can recognise the level as a playable map.Before cooking be sure to select the Content folder as the cooker will cook everything down from that folder.Go to top left at File and choose under Project -&gt; Cook Content For Windows.The cooked project will be located in your projects folder under &lt;yourprojectname&gt;/Saved/Cooked/WindowsNoEditor/To make the map appear in game you must pak the project folder with the pak bat file mentioned in The Basics.Only pak the Project folder with the Content folder inside, not the MetaData or AssetRegistry and it should work from the mat :)Name the pak to pakchunk99-Mods-&lt;yourprojectname&gt;_P - Replace the brackets and what’s in them with your project’s name.For now, delete the FMOD folder from your cooked folder unless you are testing FMOD stuff. And if you do, delete everything except your custom banks and events.If you don’t delete game-default assets everything from the game will be overwritten with empty data since the banks in this folder are only for reference.That will result in your game having no sound other than VO.MaterialsTo “paint” your walls/models/etc. you’ll need it to display a material. A material in UE4 is a set of textures layered on top of eachother to display color, depth and light interaction. Inside the asset it uses a block with nodes attached to it to get the information. This information is set up in a visual Blueprint form to make the process easier.You drag connections between the material attributes nodes to link them together. I have added a TV simulated material woth a bunch of cool layering to convey a realistic look that you’re free to use, mix n’ match.To paint an object you can drag the material from the content browser out onto the surface directly or use the side menus and select multiple surfaces to paint at the same time.Chapter not finished.Post Processing and visual techPost processing in UE4 is the method to give your maps the extra umph and sell the immersion visually. It’s how you get areas to feel different and lift the ambience for the player. The goal of post processing is to enhance what’s already there to reflect your intended visuals. I might be a little cryptic here, but that’s for the better.Let’s examplify this: If your lore is set in the Middle East it would not make sense that the light has the same color as it does further north like UK, it might be a little orange-shifted to give the “desert-feel”. Maybe you want some fog and haze to emulate distant sandstorms.Or enhanced clarity. Maybe the lighting is dialed in right for realism, but has the wrong color, saturation and contrast. Take a look at this basic example:I can’t tell you what exactly you should do for your map to look real. It is very contextual, so it varies from map to map. But I can tell you how certain elements work to achieve some effects. The first element that you should have to enable custom post processing is most obviously a Post Process Volume actor. It allows you to change a lot of values regarding filmic and rendering. It contains a long set of variables that you can change to get the desired effects:For the most part we will use what’s in the Color Grading section, because it has the most effect. Scrolling down to Color Grading Changing Temperature, Tint and Saturation, Contrast, Gain, Gamma will be our main focus point. Most scene “moods” can be achieved here..Note that the effects in Global has a drop down to change overall values more specifically, and for the most part we should only care about the slider under the color-cirle to change the value of that parameter. If you need to do some color balancing in that area you’d mostly want to do it in Saturation and Gain.FMOD Sound Integation(WIP)For this you’ll need FMOD for UE4 If you don’t know how to install FMOD visit the RoN Custom Maps Discord and check out the Guides Links or watch THIS VIDEOWhen you have installed FMOD correctly, you can make sound come into your map by placing a FMOD Audio Player from the Place Actors menu. You’ll also need to reference a sound that’s already in game* for it to play. If you want this sound to always play regardless of your location (like theme music) you don’t really need to do anything but to check that the “Start Activated” checkbox is ticked.To get the sounds from Ready Or Not into unreal editor for referencing and preview (yes you can preview the audio!) you need to copy over some banks from the game’s directory into your project. Navigate to your Steam/Steamapps/Common/Ready Or Not/ReadyOrNot/Content/FMOD/Desktop folder and select all the bank files in the folder and copy them.Then go to your project and go to the Content/FMOD/Desktop folder and paste in the banks…Navigate to the Events folder to verify that it works, you should be able to double-click an asset and preview the sound in the editor.If you want to make a dynamically changing ambience based on the area you enter you will need to use a simple blueprint actor for this. I covered that briefly in the video above, but the idea is to blend or stop all other ambiences when you step into a new one. Using a box collision that only overlaps the Pawn channel will make the triggering happen. To fade in a sound you can use a timeline to manipulate the volume but ideally you want to fade in based on the distance to the other ambience actor but for normal cues 2 seconds of fade time will do.For sound transitioning there is a transitioning volume located in Mods/Audio/Atmos that you can use to simplify this process - with that actor you can select what sound you transition to and from and you can walk back and forth through it. Place down the default ambience actor too for the sound to be played when u spawn into the level.### Custom Sounds! So there is a way to get custom sounds and music playing in game right now and will be standard with the next release version of the Covered Bones Template. For now I will link the assets you need to make this work. You still need the FMOD plugin for this. Thanks to RareKiwi#5360 and crazy4videogames#3909 for figuring out the last steps of this puzzle!#### Audio Files Setup: Make a new folder in your main (Content) folder and name it something like MySpicyAudio or something you can remember. Go to the Explorer window in Windows where you can see the files and browse to your covered bones project and go into the MySpicyAudio folder. Drag out your preferred sound (.wav, .mp3 or .ogg formats) and put it into the folder like shown below:The default wave sound file that will be included in the upcoming version of bare bones will be a 1 second long clip of a fire alarm, just to show it working:Unreal Editor will prompt you about importing the asset, so just click Import and it should appear in the Content menu. If you have set the sound up correctly you should see that the source file says FireAlarm.wav and that the path says /Game/MySpicyAudio and not the path to the location you imported it from or else it won’t play.Sound Blueprints Setup:Once you have obtained a file to play you will need to create a folder path (if it doesn’t already exist!) that will look like: Mods/Blueprints/Sound/Unused!Note that it should be in the Mods folder. Other locations might not work or cause the blueprints to misbehave…Game music needs to be fixed before I upload the ModMusic_BP, but you can download the ModSound_BP and the FireAlarm.wav here (extract in Content folder): ZIP file archiveUsing The Blueprint:Drag the blueprint out in the world where you want it to play from - a fire alarm usually plays best from above head height.In the details panel on the side you can edit some of the parameters; if it should loop, if it’s 3D (not playing everywhere) and more settings related to the max audible distance. Amongst these settings you need to set the Sound To Use as a Sound Name - The way to set up the sound name is to reference its location, name and file extension. So for the included fire alarm file you should change the name to MySpicyAudio/FireAlarm.wav - any other file you add to your custom audio folder would need to be set up the same way.If it works in the editor it will most likely work in game too. Re-cook the build and verify that the sound files and bp’s were copied over. Look in the discord and ask if you’re getting stuck :)" }, { "title": "The Basics", "url": "/posts/thebasics/", "categories": "General Information", "tags": "essential, batch", "date": "2022-07-20 00:00:00 +0000", "snippet": "Important InformationUnderstanding the File StructureWhen creating a project in Unreal Engine 4, the project will be saved to a directory. Within that directory will be the project. For example: &lt;SaveDirectory&gt;/&lt;ProjectName&gt;/…. &lt;ProjectName&gt; houses all of the contents of the Unreal Engine 4 project. In that project folder, there will be a subfolder named Content. That folder houses all of the assets and blueprints within a game.In the case of Ready or Not, the project name is ReadyOrNot. Within that folder, there is a folder called Content. Again, this houses everything inside a game except for configuration files. However, when you open the game files in UModel, there may not be a Content folder, instead, it’ll have been replaced with a Game folder. When .paking your mod, you should replace Game with Content. Any of the sub folders will remain the same.The majority of the modding that you will do will be under the Content folder. If a file that you are looking to override is in .../ReadyOrNot/Game/ReadyOrNot/Assets/Weapons/Python, the file path to copy would be .../Content/ReadyOrNot/Assets/Weapons/Python. Failure to copy the exact path of Ready or Not will result in a broken mod.File FormatsThere are multiple different file formats that you may encounter while modding. Here is a list of most of them, and what each of them are. .psk - A skeletal or static mesh. May contain the skeleton. .psa - An animation for a specific mesh. .uasset - Two types. Raw .uasset files are the ones created after cooking a UE4 project. UE4 .uasset files are the ones that are taken directly from a UE4 project, they are uncooked and can be transferred between projects. .uexp - An raw complementary file to uassets, usually containing import and export maps. .ubulk - Another data storage file that UE4 uses. .umap - A level/map file, similar to .uasset in the way that there is an uncooked and cooked version.EssentialsExtracting Game FilesThere are two methods of extracting games files, both have important differences: UModel. This program can extract non-raw files, allowing you to gain access to textures, models, and animations. To use it, direct it towards the location of the .pak files within Ready or Not: &lt;GameInstallLocation&gt;\\Ready Or Not\\ReadyOrNot\\Content\\Paks. You’ll be able to extract individual assets once loaded. Manual unpaking. This can be done simply by setting up an unpak batch script. Create a .bat file in your UnrealPak install location (located within your Unreal Engine 4 install), usually &lt;InstallLocation&gt;\\UE_4.27\\Engine\\Binaries\\Win64\\UnrealPak.exe. In the .bat file, paste the following lines in and save: @if \"%~1\"==\"\" goto skip @setlocal enableextensions @pushd %~dp0 .\\UnrealPak.exe %1 -extract \"%~n1\" @popd @pause :skip Drag the .pak file you want to unpak, for example pakchunk0-WindownNoEditor_0_P, directly onto the .bat file you just created. This will extract the pak’s files in the same location as the batch file. Cooking Modified FilesIn order to override any assets within the game or add new content, the files must be in a format that the game can recognize. The files you extracted via UModel will be in a format that is easily accessible by you, not the game. You will first need to cook these before PAKing the files. Install the latest version of Unreal Engine 4.27. The current latest version is 4.27.2. Import all the files you want to pack with your mod into a new blank project. Any other template can work, but will result in significantly longer cooking times. Go to File &gt; Cook Content for Windows. This converts the files into a UE4 exported format (*.uasset, *.uexp, *.ubulk). Retrieve the cooked files in &lt;ProjectLocation/&gt;&lt;ProjectName&gt;/Saved/Cooked/WindowsNoEditor/.Creating a PAK File Make sure the folder you are paking, for example pakchunk99-Mods_MyMod_P, contains the same file structure as Ready or Not. Also ensure that _P is at the end of your pak name. Not doing so will likely result in the mod not loading. The number after pakchunk indicates the load order of the .pak. Make sure to understand the directory structure first, before paking your mod. Incorrect directory structure will lead to issues. Your structure should mimic something like this: pakchunk99-Mods_MyMod/Content/ReadyOrNot/Assets/…. Create a .bat file in your UnrealPak install location (located within your Unreal Engine 4 install), usually &lt;InstallLocation&gt;\\UE_4.27\\Engine\\Binaries\\Win64\\UnrealPak.exe. In the .bat file, paste the following lines in and save: @if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~dp0@echo \"%~1\\*.*\" \"../../../ReadyOrNot/\" &gt;filelist.txt.\\UnrealPak.exe \"%~1.pak\" -create=filelist.txt -compress@popd@pause:skip Drag the folder you want to PAK, for example pakchunk99-Mods_MyMod_P, directly onto the .bat file you just created. This will create a .pak file in the same directory as the folder you just dragged. If the .pak file size is 1 KB, change the locations of the contents you are attempting to pak.Additional InformationMod InstallationAll .pak mods go here. &lt;GameInstallLocation&gt;\\Ready Or Not\\ReadyOrNot\\Content\\Paks. Ensure that the .pak load order is correct.Example ModTo see if your PAKing is working, download this example mod. This will turn your gun on the main menu pink if the .pak is correctly PAKed. Download and extract the .zip file before PAKing.DebuggingIf your mod is not working, make sure to check these common error points: Check the file strucuture. This must perfectly match the files within the game, otherwise it will not load. No _P at the end of the mod name. This is needed when a patch pak is used for the main game files. Load order. Incorrecy load order may cause issues between mods, change the numberical elements of the pak name to change the load order. Mount point (The best way to debug any issues is to use the builtin UnrealPak.exe. Simply open this with cmd with the line: unreakpak.exe -List This_Is_A_Pak.pak. Look at the mounting point. The mounting point will be the deepest folder that encapulates all of your content. If it is not, you may have an issue.)" }, { "title": "UAsset Modding", "url": "/posts/uassetmodding/", "categories": "UAsset Modding", "tags": "uasset", "date": "2022-07-19 00:00:00 +0000", "snippet": "UAsset Modding [UE5.3] UassetGUI now needs a Mappings.usmap for full functionalityTo do UAsset modding, you’ll need to be able to extract the raw files from the game. Make sure to use this .bat file in your UE4 install directory to unpack the game files:@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~dp0.\\UnrealPak.exe %1 -extract \"%~n1\"@popd@pause:skipNumerical/String EditsThese are by far the easiest edits to do. Open UAssetGUI and open the UAsset file you wish to edit. On the left side you’ll see a series of dropdowns. Within these, you’ll find various structs that you can edit. Find the struct that you would like to edit, and find the value within that you would like to change. Change the value. Save the file to anywhere. Two files will have been created, a .uasset and a .uexp, make sure to pak both of these files into your .pak mod in the correct location.Adding DataThis can be a very complicated portion of modding. Make sure to read all of this very carefully. This section will be specific in what to do and what to not do, but will not explain everything, as each file can be a little different. As long as you make sure the imports are correct and that you added the data correctly, the file should work. Open the UAsset file in UAssetGUI. Export the JSON file, and open that file in a text editor of your choice. I would suggest using Notepad++ and the JSON Parser plugin. This will let you auto-format the JSON file. When adding data, you’ll need to copy and paste whatever data you’re trying to add more of. If if this is a new item in ItemDataTable.uasset, then you’ll need to copy another item in the datatable. Copy and paste whatever you would like to duplicate into the correct location. Keep in mind all of the commas and brackets. If you see a negative number that doesn’t correlate to coordinates, or scale, or rotation, this is an import reference. If you open Import Data located in the left pane of UAssetGUI, you’ll see a bunch of negative numbers in the first column and other data stored in rows. This is the \t portion of the file that contains all the references and imports the file uses. Also within this file, you’ll see a column label called OuterIndex. This column will also contain a bunch of negative nunber and 0s. The 0s indicate that the row is not a child of another row. If this row contains a negative number within that column, then that row depends on another dependency. You can find this dependency as you would any other import, locatin the row with said negative number. When adding a reference from the game, it’s a good idea to copy and paste similar references and then change the strings slightly. This ensures that you will retain the correct formatting. You can add this reference either in the JSON file or in UAssetGUI. Both are better in different scenarios. If you’re going to add a bunch of imports, use the JSON file, otherwise use UAssetGUI. Save the JSON file with all your edits and open that JSON file in UAssetGUI. If you get an error, you messed up the JSON formatting. If you have made all your data additions and made sure to have the proper imports (you may need to import multiple times for just one thing), then the mod should work. You can tell if it’s working if the game does’t freeze or crash on launch (wait until the intro screen ends). If this occurs there is a high chance you messed up something with the imports." }, { "title": "UAsset Automation", "url": "/posts/uassetautomation/", "categories": "UAsset Modding", "tags": "uasset, python, automation", "date": "2022-07-19 00:00:00 +0000", "snippet": "UAsset AutomationJSON Parsing via PythonOnce you have a firm understanding of manually editing UAssets, you can semi-easily automate tasks. To start, you’ll need some Python, or other programming knowledge. I’ll be using Python for this tutorial because of the simple to use json library that comes with Python 3+. I highly recommend doing this if you need to change a lot of data every time the game updates. If you would like specific help with this, ask QuantumNuke75#3593 on Discord. Note that the code down below may not be pretty, as it’s gone under numerous changes as the game updates.Ammo ModYour first line should be the import statement.import jsonNext, you’ll want to open the file. To do this, replace FILE_NAME with the location of your JSON file that you extracted with UAssetGUI.file = open('FILE_NAME')At the bottom of the file, you’ll want to export your JSON file, which you can then load back up in UAssetGUI and save it as a .uasset.json.dump(data, open(\"export.json\", \"w\"))But, you’ll then want to load this file as a JSON file. data will become a Python dictionary.data = json.load(file)Within this data variable will be layers of dictionaries, lists, and key-value pairs witin the dictionaries. From this, you’ll be able to easily automate adding, data, changing values, or anything. Now we’ll need to loop through every item in the export datatable, which is where the majority of the data we need is held.for item in data[\"Exports\"][0][\"Table\"][\"Data\"]:Now we need to loop through every value for every item, since the ammo count for a gun is just one of many values an item has.\tfor item_data in item[\"Value\"]:Now, we check for specific tags, in our case, these tags are MagazineCountDefault(0) and MagazineCountMax(0). Once we’ve found these tags, we can set the values of these to whatever we want. In this specific case, the code is getting the value, and adding a number of mags to it.\t\tif item_data[\"Name\"] == \"MagazineCountDefault(0)\": amount = int(item_data[\"Value\"]) if 3 &lt; amount &lt; 30: item_data[\"Value\"] = num_mags continue if item_data[\"Name\"] == \"MagazineCountMax(0)\": amount = int(item_data[\"Value\"]) if 3 &lt; amount &lt; 30: item_data[\"Value\"] = num_mags continueThe full code is below:import jsonnum_mags = 15file = open('ItemDataTable.json')data = json.load(file)# For every item in the export table.for item in data[\"Exports\"][0][\"Table\"][\"Data\"]: # For every piece of the item data. for item_data in item[\"Value\"]: # If the item's name is MagazineCount if item_data[\"Name\"] == \"MagazineCountDefault(0)\": amount = int(item_data[\"Value\"]) if 3 &lt; amount &lt; 30: item_data[\"Value\"] = num_mags continue if item_data[\"Name\"] == \"MagazineCountMax(0)\": amount = int(item_data[\"Value\"]) if 3 &lt; amount &lt; 30: item_data[\"Value\"] = num_mags continuejson.dump(data, open(f\"ammo_export_{num_mags}.json\", \"w\")) More Ammo is an outdated mod, and this code will no longer effect anything in the game.Everything UnlockedI’ll be skipping basic portions of parsing, and will explain more complicated changes instead. Adding data with this method is significantly harder than just changing values. There are two different files we need to edit for Everything Unlocked, ItemDataTable.uasset and ItemData.uasset.ItemDataIn order to add entries to the ItemData we’ll need know what data to add. Every weapon has the following distinct attributes: name, gun blueprint location, default class name, class name, and the item type. In order to make this easier, a struct class was created.class ItemDataStruct: def __init__(self, name, location, default, clas, type): self.name = name self.location = location self.default = default self.clas = clas self.type = typeThis class holds all the information needed to add a specific gun. Now, we need to add a bunch of values. Since we are adding both primary weapons, secondary weapons, tacticals, and helmets accessory options, it’s important to distinguish them all. We’ll store each category of items in their separate arrays.primary_weapons = []primary_weapons.append(ItemDataStruct(\"P90\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_P90(0)\", \"Default__Primary_P90_C(0)\", \"Primary_P90_C(0)\", \"SMG\"))primary_weapons.append(ItemDataStruct(\"Primary_M16A4\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_M16A4(0)\", \"Default__Primary_M16A4_C(0)\", \"Primary_M16A4_C(0)\", \"AR\"))primary_weapons.append(ItemDataStruct(\"Primary_Saiga12\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_Saiga12(0)\", \"Default__Primary_Saiga12_C(0)\", \"Primary_Saiga12_C(0)\", \"Shotgun\"))secondary_weapons = []secondary_weapons.append(ItemDataStruct(\"P250\", \"/Game/Blueprints/Items/WeaponsRevised/Secondary_P250(0)\", \"Default__Secondary_P250_C(0)\", \"Secondary_P250_C(0)\", \"Pistol\"))tacticals = []tacticals.append(ItemDataStruct(\"9Banger\", \"/Game/Blueprints/Items/WeaponsRevised/Grenade_9Banger_V2(0)\", \"Default__Grenade_9Banger_V2_C(0)\", \"Grenade_9Banger_V2_C(0)\", \"Grenade\"))helmets = []helmets.append(ItemDataStruct(\"Helmet_UpArmor\", \"/Game/Blueprints/Items/ArmorRevised/Helmet_UpArmor(0)\", \"Default__Helmet_UpArmor_C(0)\", \"Helmet_UpArmor_C(0)\", \"Helmet\"))Now we can begin parsing through the data. Similarly to More Ammo, we’ll be accessing the data in the same way but instead we’ll checking if the item is a PrimaryWeapons(0), SecondaryWeapon(0), TacticalItems(0), or HeadSelection(0).if items[\"Name\"] == \"PrimaryWeapons(0)\":elif items[\"Name\"] == \"SecondaryWeapons(0)\":elif items[\"Name\"] == \"TacticalItems(0)\":elif items[\"Name\"] == \"HeadSelection(0)\":I’ll only be covering how to automate the primary weapons to prevent this guide from getting longer. Each category is very similar, with some slight changes. Once we’ve establish that we’re in the PrimaryWeapons(0) category, we can begin making changes. Now we can parse through all the weapon structs we created for primary weapons.for weapon_struct in primary_weapons:The second thing we’ll need to to is add the imports. Without imports, the game will have no idea what you’ve added to the table. However, we need to get the current import number.last_import_index = len(data[\"Imports\"])Once we’ve done that, we can add all the imports we need.dic_1 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/CoreUObject(0)', 'ClassName': 'Package(0)', 'ObjectName': weapon_struct.location, 'OuterIndex': 0}last_import_index += 1dic_2 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/Engine(0)', 'ClassName': 'BlueprintGeneratedClass(0)', 'ObjectName': weapon_struct.clas, 'OuterIndex': -last_import_index}last_import_index += 1dic_3 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': weapon_struct.location, 'ClassName': weapon_struct.clas, 'ObjectName': weapon_struct.default, 'OuterIndex': -(last_import_index-1)}last_import_index += 1data[\"Imports\"].append(dic_1)data[\"Imports\"].append(dic_2)data[\"Imports\"].append(dic_3)Now we can add the actual weapons to ItemData. We first need to distinguish between what type of weapon we have, this changes what Type, CultureInvariantString, and ItemClass we need. We’ll also be copying a related gun entry so we don’t have to create everything from scratch.last_copy = Nonetype = NoneCultureInvariantString = Noneitem_class = Noneif weapon_struct.type == \"SMG\":\ttype = \"EWeaponType::WT_SubmachineGun(0)\"\tCultureInvariantString = \"SMG\"\titem_class = \"EItemClass::IC_SMG(0)\"\tlast_copy = copy.deepcopy(items[\"Value\"][0])elif weapon_struct.type == \"AR\":\ttype = \"EWeaponType::WT_Rifles(0)\"\tCultureInvariantString = \"Rifle\"\titem_class = \"EItemClass::IC_AssaultRifle(0)\"\tlast_copy = copy.deepcopy(items[\"Value\"][12])elif weapon_struct.type == \"Shotgun\":\ttype = \"EWeaponType::WT_Shotgun(0)\"\tCultureInvariantString = \"Shotgun\"\titem_class = \"EItemClass::IC_Shotgun(0)\"\tlast_copy = copy.deepcopy(items[\"Value\"][7])Now, we set the related data in the copy.# Set gun typelast_copy[\"Value\"][0][\"Value\"][0][\"Value\"] = type# Set Categorylast_copy[\"Value\"][4][\"Value\"] = item_class#Set namelast_copy[\"Value\"][1]['Value'] = weapon_struct.name# Set culture invariant stringlast_copy[\"Value\"][3][\"CultureInvariantString\"] = CultureInvariantStringThen, we set the import reference to the imports we just created, and append the new weapon to the table.# Set import reflast_copy[\"Value\"][5][\"Value\"] = -(last_import_index-1)# Append item to tableitems[\"Value\"].append(last_copy)The final code:import copy, jsonfrom ItemDataStruct import ItemDataStructf = open('json/ItemData.json')data = json.load(f)primary_weapons = []primary_weapons.append(ItemDataStruct(\"P90\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_P90(0)\", \"Default__Primary_P90_C(0)\", \"Primary_P90_C(0)\", \"SMG\"))primary_weapons.append(ItemDataStruct(\"Primary_M16A4\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_M16A4(0)\", \"Default__Primary_M16A4_C(0)\", \"Primary_M16A4_C(0)\", \"AR\"))primary_weapons.append(ItemDataStruct(\"Primary_Saiga12\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_Saiga12(0)\", \"Default__Primary_Saiga12_C(0)\", \"Primary_Saiga12_C(0)\", \"Shotgun\"))secondary_weapons = []secondary_weapons.append(ItemDataStruct(\"P250\", \"/Game/Blueprints/Items/WeaponsRevised/Secondary_P250(0)\", \"Default__Secondary_P250_C(0)\", \"Secondary_P250_C(0)\", \"Pistol\"))tacticals = []tacticals.append(ItemDataStruct(\"9Banger\", \"/Game/Blueprints/Items/WeaponsRevised/Grenade_9Banger_V2(0)\", \"Default__Grenade_9Banger_V2_C(0)\", \"Grenade_9Banger_V2_C(0)\", \"Grenade\"))helmets = []helmets.append(ItemDataStruct(\"Helmet_UpArmor\", \"/Game/Blueprints/Items/ArmorRevised/Helmet_UpArmor(0)\", \"Default__Helmet_UpArmor_C(0)\", \"Helmet_UpArmor_C(0)\", \"Helmet\"))last_import_index = len(data[\"Imports\"])# For every item in the table.for items in data[\"Exports\"][0][\"Data\"]: if items[\"Name\"] == \"PrimaryWeapons(0)\": for weapon_struct in primary_weapons: # START IMPORTS dic_1 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/CoreUObject(0)', 'ClassName': 'Package(0)', 'ObjectName': weapon_struct.location, 'OuterIndex': 0} last_import_index += 1 dic_2 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/Engine(0)', 'ClassName': 'BlueprintGeneratedClass(0)', 'ObjectName': weapon_struct.clas, 'OuterIndex': -last_import_index} last_import_index += 1 dic_3 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': weapon_struct.location, 'ClassName': weapon_struct.clas, 'ObjectName': weapon_struct.default, 'OuterIndex': -(last_import_index-1)} last_import_index += 1 data[\"Imports\"].append(dic_1) data[\"Imports\"].append(dic_2) data[\"Imports\"].append(dic_3) # END IMPORTS last_copy = None type = None CultureInvariantString = None item_class = None if weapon_struct.type == \"SMG\": type = \"EWeaponType::WT_SubmachineGun(0)\" CultureInvariantString = \"SMG\" item_class = \"EItemClass::IC_SMG(0)\" last_copy = copy.deepcopy(items[\"Value\"][0]) elif weapon_struct.type == \"AR\": type = \"EWeaponType::WT_Rifles(0)\" CultureInvariantString = \"Rifle\" item_class = \"EItemClass::IC_AssaultRifle(0)\" last_copy = copy.deepcopy(items[\"Value\"][12]) elif weapon_struct.type == \"Shotgun\": type = \"EWeaponType::WT_Shotgun(0)\" CultureInvariantString = \"Shotgun\" item_class = \"EItemClass::IC_Shotgun(0)\" last_copy = copy.deepcopy(items[\"Value\"][7]) # Set gun type last_copy[\"Value\"][0][\"Value\"][0][\"Value\"] = type # Set Category last_copy[\"Value\"][4][\"Value\"] = item_class #Set name last_copy[\"Value\"][1]['Value'] = weapon_struct.name # Set culture invariant string last_copy[\"Value\"][3][\"CultureInvariantString\"] = CultureInvariantString # Set import ref last_copy[\"Value\"][5][\"Value\"] = -(last_import_index-1) items[\"Value\"].append(last_copy) elif items[\"Name\"] == \"SecondaryWeapons(0)\": for weapon_struct in secondary_weapons: # START IMPORTS dic_1 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/CoreUObject(0)', 'ClassName': 'Package(0)', 'ObjectName': weapon_struct.location, 'OuterIndex': 0} last_import_index += 1 dic_2 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/Engine(0)', 'ClassName': 'BlueprintGeneratedClass(0)', 'ObjectName': weapon_struct.clas, 'OuterIndex': -last_import_index} last_import_index += 1 dic_3 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': weapon_struct.location, 'ClassName': weapon_struct.clas, 'ObjectName': weapon_struct.default, 'OuterIndex': -(last_import_index - 1)} last_import_index += 1 data[\"Imports\"].append(dic_1) data[\"Imports\"].append(dic_2) data[\"Imports\"].append(dic_3) # END IMPORTS last_copy = copy.deepcopy(items[\"Value\"][0]) type = None CultureInvariantString = None item_class = None if weapon_struct.type == \"Pistol\": type = \"EWeaponType::WT_PistolsLethal(0)\" CultureInvariantString = \"Semi-Automatic\" item_class = \"EItemClass::IC_Pistol(0)\" # Set Weapon Type last_copy[\"Value\"][0][\"Value\"][0][\"Value\"] = type # Set ItemClass last_copy[\"Value\"][4][\"Value\"] = item_class # Set name last_copy[\"Value\"][1]['Value'] = weapon_struct.name # Set culture invariant string last_copy[\"Value\"][3][\"CultureInvariantString\"] = CultureInvariantString # Set import ref last_copy[\"Value\"][5][\"Value\"] = -(last_import_index - 1) items[\"Value\"].append(last_copy) elif items[\"Name\"] == \"TacticalItems(0)\": for item_struct in tacticals: # START IMPORTS dic_1 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/CoreUObject(0)', 'ClassName': 'Package(0)', 'ObjectName': item_struct.location, 'OuterIndex': 0} last_import_index += 1 dic_2 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/Engine(0)', 'ClassName': 'BlueprintGeneratedClass(0)', 'ObjectName': item_struct.clas, 'OuterIndex': -last_import_index} last_import_index += 1 dic_3 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': item_struct.location, 'ClassName': item_struct.clas, 'ObjectName': item_struct.default, 'OuterIndex': -(last_import_index - 1)} last_import_index += 1 data[\"Imports\"].append(dic_1) data[\"Imports\"].append(dic_2) data[\"Imports\"].append(dic_3) # END IMPORTS last_copy = copy.deepcopy(items[\"Value\"][0]) item_class = \"EItemClass::IC_Grenade(0)\" # Set Name last_copy[\"Value\"][0][\"Value\"] = item_struct.name #Set ItemClass last_copy[\"Value\"][10][\"Value\"] = item_class # Set import ref last_copy[\"Value\"][13][\"Value\"] = -(last_import_index - 1) print(len(last_copy[\"Value\"])) items[\"Value\"].append(last_copy) elif items[\"Name\"] == \"HeadSelection(0)\": for item_struct in helmets: # START IMPORTS dic_1 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/CoreUObject(0)', 'ClassName': 'Package(0)', 'ObjectName': item_struct.location, 'OuterIndex': 0} last_import_index += 1 dic_2 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/Engine(0)', 'ClassName': 'BlueprintGeneratedClass(0)', 'ObjectName': item_struct.clas, 'OuterIndex': -last_import_index} last_import_index += 1 dic_3 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': item_struct.location, 'ClassName': item_struct.clas, 'ObjectName': item_struct.default, 'OuterIndex': -(last_import_index - 1)} last_import_index += 1 data[\"Imports\"].append(dic_1) data[\"Imports\"].append(dic_2) data[\"Imports\"].append(dic_3) # END IMPORTS item_class = \"EItemClass::IC_Headgear(0)\" last_copy = copy.deepcopy(items[\"Value\"][0]) # Set Name last_copy[\"Value\"][0][\"Value\"] = item_struct.name # Set Item Class last_copy[\"Value\"][3][\"Value\"] = item_class # Set import ref last_copy[\"Value\"][4][\"Value\"] = -(last_import_index - 1) items[\"Value\"].append(last_copy)json.dump(data, open(f\"output/everything_unlocked_itemdata.json\", \"w\"))ItemDataTableThis is an easier table to edit, but required more data. To start, you’ll need a dictionary of attachments mapped to their respective socket for each category of attachment: sight, muzzle, underbarrel. You’ll also need a dictionary of item names, mapped to a list of sockets they have.Here’s an example of the underbarrel attachment list, which we’ll be using as an example:all_under = {-38:\"combat_grip\",-39:\"combat_grip\",-65:\"mp5_foregrip\",-66:\"mp5_foregrip\",-70:\"mp5_foregrip\",-81:\"light_socket\",-82:\"laser_socket\",-83:\"laser_socket\",-86:\"foregrip_socket\",-87:\"afg_mlok_grip\",-90:\"foregrip_socket\",-91:\"pointer_socket\",-92:\"pointer_socket\",-102:\"foregrip_VFG_socket\",-103:\"foregrip_socket\",-104:\"vfg_mlok_grip\",-136:\"foregrip_socket\"}And here’s an example of the weapon names mapped to attachments (Note: This list may be outdated.):weapon_to_attachments = {'M1911A1':{'RMRPistol_Socket', 'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'flash_socket', 'Reflex_Socket'},'G19':{'RMRPistol_Socket', 'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'flash_socket', 'Reflex_Socket'}}Now we parse through the ItemDataTable and look for the corresponding attachment AvailableUnderbarrelAttachments(0). Once we do, we check the weapon_to_attachments dictionary, and add all the attachments to the weapon.for item in data[\"Exports\"][0][\"Table\"][\"Data\"]: for item_data in item[\"Value\"]:\t if item_data[\"Name\"] == \"AvailableUnderbarrelAttachments(0)\": name = item[\"Value\"][0][\"CultureInvariantString\"] try: comp_attachments = weapon_to_attachments[name] except: continue attachments_to_add = [] for under in all_under: if all_under[under] in comp_attachments: attachments_to_add.append(under) for attachment in attachments_to_add: copied = copy.deepcopy(attachment_dic_format) copied[\"Value\"] = attachment if copied not in item_data[\"Value\"]: item_data[\"Value\"].append(copied) continueFull code below. As a bonus, weapon inertia was also changed for items, making unlocked weapons more usable.import copy, jsonfile = open('json/ItemDataTable.json')data = json.load(file)all_scopes = {-42:\"SRO_FBI_Socket\",-43:\"RMR_FBI_Socket\",-44:\"RMRPistol_Socket\",-45:\"RMR_Socket\",-46:\"RMRPistol_Socket\",-47:\"SRO_Socket\",-48:\"SROPistol_Socket\",-49:\"SROPistol_Socket\",-50:\"SRORaised_socket\",-51:\"Delta_Socket\",-52:\"ACOG_Socket\",-53:\"atac_Socket\",-54:\"HAMR_Socket\",-55:\"Harris_Socket\",-56:\"M5B_Socket\",-57:\"sdr_Socket\",-105:\"Scope_Socket\",-106:\"Reflex_Socket\",-107:\"EXPS3_socket\",-108:\"Holosight_XPS3\",-109:\"Rail_Socket\",-110:\"Rail_Socket\",-111:\"Rail_Socket\",-112:\"Reflex_Socket\",-113:\"Reflex_Socket\",-114:\"Reflex_Socket\",-115:\"Reflex_Socket\",-116:\"Reflex_Socket\",-117:\"Reflex_Socket\",-118:\"Reflex_Socket\",-119:\"MicroT2_Socket\",-120:\"MicroT2_FBI_Socket\",-121:\"MicroT2Raised_Socket\",-122:\"EXPS3_MP5_optic\",-123:\"SRO_MP5_optic\",-124:\"mp5_optic\",-125:\"MicroT2_mp5_optic\",-126:\"Reflex_Socket\",-127:\"Reflex_Socket\",-128:\"Reflex_Socket\",-129:\"SRSRaised_socket\"}all_muzzles = {-28:\"muzzle_socket\",-29:\"asr_socket\",-30:\"asr_socket\",-31:\"sfmb_socket\",-32:\"sfmb_socket\",-33:\"shotgunbrake_socket\",-40:\"brake_socket\",-60:\"socom338_socket\",-61:\"tag_mp9suppressor\",-62:\"PBS_socket\",-63:\"socom338_socket\",-64:\"socom338_socket\",-78:\"comp_socket\",-79:\"comp_socket\",-80:\"flash_socket\",-84:\"supressor_socket\",-85:\"supressor_socket\",-88:\"compensator_socket\",-97:\"Barrel_Socket\",-100:\"Barrel_Socket\",-101:\"supressor_socket\",-130:\"Choke_Socket\",-131:\"tube_socket\",-135:\"supressor_socket\"}all_under = {-38:\"combat_grip\",-39:\"combat_grip\",-65:\"mp5_foregrip\",-66:\"mp5_foregrip\",-70:\"mp5_foregrip\",-81:\"light_socket\",-82:\"laser_socket\",-83:\"laser_socket\",-86:\"foregrip_socket\",-87:\"afg_mlok_grip\",-90:\"foregrip_socket\",-91:\"pointer_socket\",-92:\"pointer_socket\",-102:\"foregrip_VFG_socket\",-103:\"foregrip_socket\",-104:\"vfg_mlok_grip\",-136:\"foregrip_socket\"}weapon_to_attachments = {'M1911A1':{'RMRPistol_Socket', 'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'flash_socket', 'Reflex_Socket'},'G19':{'RMRPistol_Socket', 'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'flash_socket', 'Reflex_Socket'},'G18 Auto':{'light_socket', 'laser_socket', 'comp_socket', 'RMRPistol_Socket', 'supressor_socket', 'flash_socket', 'Reflex_Socket', 'SROPistol_Socket'},'SKL_Pistol_M92FS':{'light_socket', 'brake_socket', 'comp_socket', 'supressor_socket'},'P250':{'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'brake_socket'},'P99':{'comp_socket', 'Delta_Socket', 'supressor_socket', 'laser_socket', 'light_socket', 'flash_socket', 'Reflex_Socket', 'Harris_Socket'},'.357 Magnum':{'muzzle_socket', 'pointer_socket', 'Reflex_Socket', 'supressor_socket'},'Taser':{'laser_socket'},'USP45':{'RMRPistol_Socket', 'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'brake_socket'},'P92X':{'RMRPistol_Socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'brake_socket'},'G36C':{'asr_socket', 'RMR_Socket', 'pointer_socket', 'HAMR_Socket', 'laser_socket', 'light_socket', 'combat_grip', 'socom338_socket', 'M5B_Socket', 'sfmb_socket', 'foregrip_socket', 'EXPS3_socket', 'SRO_Socket', 'Reflex_Socket'},'M14':{'Rail_Socket', 'foregrip_socket', 'laser_socket', 'supressor_socket'},'M24':{'ACOG_Socket', 'Scope_Socket', 'Reflex_Socket', 'supressor_socket'},'M4A1':{'asr_socket', 'pointer_socket', 'HAMR_Socket', 'ACOG_Socket', 'supressor_socket', 'MicroT2Raised_Socket', 'laser_socket', 'light_socket', 'combat_grip', 'compensator_socket', 'M5B_Socket', 'sfmb_socket', 'socom338_socket', 'foregrip_socket', 'Reflex_Socket'},'AK102':{'pointer_socket', 'HAMR_Socket', 'ACOG_Socket', 'supressor_socket', 'laser_socket', 'light_socket', 'foregrip_socket', 'Reflex_Socket', 'Harris_Socket'},'MK1 Carbine':{'asr_socket', 'pointer_socket', 'SRSRaised_socket', 'laser_socket', 'socom338_socket', 'combat_grip', 'sfmb_socket', 'foregrip_socket'},'ARN-18':{'asr_socket', 'laser_socket', 'socom338_socket', 'combat_grip', 'sfmb_socket', 'EXPS3_socket', 'vfg_mlok_grip', 'Reflex_Socket', 'afg_mlok_grip'},'SA-58':{'asr_socket', 'sdr_Socket', 'pointer_socket', 'MicroT2Raised_Socket', 'laser_socket', 'light_socket', 'combat_grip', 'socom338_socket', 'M5B_Socket', 'sfmb_socket', 'foregrip_socket', 'EXPS3_socket', 'SRO_Socket', 'atac_Socket', 'Reflex_Socket'},'GA416':{'asr_socket', 'sdr_Socket', 'pointer_socket', 'ACOG_Socket', 'SRSRaised_socket', 'laser_socket', 'socom338_socket', 'combat_grip', 'M5B_Socket', 'sfmb_socket', 'EXPS3_socket', 'vfg_mlok_grip', 'atac_Socket', 'Reflex_Socket', 'afg_mlok_grip'},'M16A4':{'HAMR_Socket', 'ACOG_Socket', 'Scope_Socket', 'supressor_socket', 'Reflex_Socket'},'SCAR-H':{'asr_socket', 'pointer_socket', 'SRSRaised_socket', 'socom338_socket', 'combat_grip', 'sfmb_socket', 'foregrip_socket', 'atac_Socket'},'SLR47':{'pointer_socket', 'laser_socket', 'combat_grip', 'PBS_socket', 'afg_mlok_grip'},'SR-16':{'asr_socket', 'Harris_Socket', 'pointer_socket', 'HAMR_Socket', 'ACOG_Socket', 'supressor_socket', 'SRSRaised_socket', 'laser_socket', 'light_socket', 'combat_grip', 'socom338_socket', 'M5B_Socket', 'sfmb_socket', 'foregrip_socket', 'EXPS3_socket', 'vfg_mlok_grip', 'Reflex_Socket', 'afg_mlok_grip'},'Pepperball Gun':{'pointer_socket', 'combat_grip', 'M5B_Socket', 'foregrip_socket', 'Reflex_Socket'},'B1301':{'Choke_Socket', 'MicroT2_Socket', 'RMR_Socket', 'pointer_socket', 'shotgunbrake_socket', 'SRO_FBI_Socket', 'RMR_FBI_Socket', 'MicroT2_FBI_Socket', 'brake_socket', 'SRO_Socket'},'B1301 \"Entryman\"':{'Choke_Socket', 'MicroT2_Socket', 'RMR_Socket', 'pointer_socket', 'shotgunbrake_socket', 'SRO_FBI_Socket', 'RMR_FBI_Socket', 'MicroT2_FBI_Socket', 'brake_socket', 'SRO_Socket'},'M4 Super 90':{'Choke_Socket', 'Barrel_Socket', 'supressor_socket', 'light_socket', 'foregrip_socket', 'Reflex_Socket'},'M590-A':{'tube_socket', 'supressor_socket', 'light_socket', 'foregrip_socket', 'Reflex_Socket'},'Saiga 12':{'pointer_socket', 'Reflex_Socket'},'870 CQB':{'RMR_Socket', 'supressor_socket', 'light_socket', 'shotgunbrake_socket', 'brake_socket', 'SRO_Socket', 'Reflex_Socket'},'MP5/10MM':{'MicroT2_Socket', 'RMR_Socket', 'pointer_socket', 'laser_socket', 'foregrip_VFG_socket', 'combat_grip', 'socom338_socket', 'foregrip_socket', 'SRO_Socket'},'MP5A3':{'MicroT2_Socket', 'RMR_Socket', 'pointer_socket', 'laser_socket', 'foregrip_VFG_socket', 'combat_grip', 'socom338_socket', 'foregrip_socket', 'EXPS3_socket', 'SRO_Socket'},'MP9':{'MicroT2_Socket', 'RMR_Socket', 'pointer_socket', 'tag_mp9suppressor', 'laser_socket', 'SRO_Socket'},'MPX':{'pointer_socket', 'supressor_socket', 'light_socket', 'socom338_socket', 'combat_grip', 'SRORaised_socket', 'vfg_mlok_grip', 'Reflex_Socket', 'afg_mlok_grip'},'P90':{'RMR_Socket', 'pointer_socket', 'socom338_socket', 'light_socket', 'Reflex_Socket'},'57 USG':{'RMRPistol_Socket', 'supressor_socket', 'light_socket', 'laser_socket', 'socom338_socket', 'SROPistol_Socket'},'MK16':{'asr_socket', 'Barrel_Socket', 'pointer_socket', 'HAMR_Socket', 'supressor_socket', 'MicroT2Raised_Socket', 'laser_socket', 'light_socket', 'socom338_socket', 'compensator_socket', 'sfmb_socket', 'foregrip_socket', 'Reflex_Socket', 'Harris_Socket'},'ARWC':{'asr_socket', 'sdr_Socket', 'pointer_socket', 'HAMR_Socket', 'SRSRaised_socket', 'laser_socket', 'light_socket', 'combat_grip', 'socom338_socket', 'sfmb_socket', 'EXPS3_socket', 'vfg_mlok_grip', 'atac_Socket', 'Reflex_Socket', 'afg_mlok_grip'},'UMP-45':{'comp_socket', 'pointer_socket', 'supressor_socket', 'MicroT2Raised_Socket', 'SRSRaised_socket', 'laser_socket', 'light_socket', 'combat_grip', 'SRORaised_socket', 'foregrip_socket', 'EXPS3_socket', 'Reflex_Socket'},'PFC9':{'SROPistol_Socket', 'laser_socket', 'comp_socket', 'light_socket', 'RMRPistol_Socket', 'supressor_socket'}}attachment_dic_format = {'$type': 'UAssetAPI.PropertyTypes.ObjectPropertyData, UAssetAPI', 'Name': '3', 'DuplicationIndex': 0, 'Value': -95}# For every item in the table.for item in data[\"Exports\"][0][\"Table\"][\"Data\"]: # For every piece of the item data. for item_data in item[\"Value\"]: # # Set inertia # if item_data[\"Name\"] == \"InertiaDragAimRotation(0)\": item_data[\"Value\"] = 0.8 continue elif item_data[\"Name\"] == \"InertiaDragAimLocation(0)\": item_data[\"Value\"] = 0.15 continue elif item_data[\"Name\"] == \"InertiaDragStrafeRotation(0)\": item_data[\"Value\"] = 0.4 continue elif item_data[\"Name\"] == \"InertiaDragStrafeLocation(0)\": item_data[\"Value\"] = 0.2 continue # Attachments elif item_data[\"Name\"] == \"AvailableScopeAttachments(0)\": name = item[\"Value\"][0][\"CultureInvariantString\"] try: comp_attachments = weapon_to_attachments[name] except: continue attachments_to_add = [] for scope in all_scopes: if all_scopes[scope] in comp_attachments: attachments_to_add.append(scope) for attachment in attachments_to_add: copied = copy.deepcopy(attachment_dic_format) copied[\"Value\"] = attachment if copied not in item_data[\"Value\"]: item_data[\"Value\"].append(copied) continue elif item_data[\"Name\"] == \"AvailableMuzzleAttachments(0)\": name = item[\"Value\"][0][\"CultureInvariantString\"] try: comp_attachments = weapon_to_attachments[name] except: continue attachments_to_add = [] for muzzle in all_muzzles: if all_muzzles[muzzle] in comp_attachments: attachments_to_add.append(muzzle) for attachment in attachments_to_add: copied = copy.deepcopy(attachment_dic_format) copied[\"Value\"] = attachment if copied not in item_data[\"Value\"]: item_data[\"Value\"].append(copied) continue elif item_data[\"Name\"] == \"AvailableUnderbarrelAttachments(0)\": name = item[\"Value\"][0][\"CultureInvariantString\"] try: comp_attachments = weapon_to_attachments[name] except: continue attachments_to_add = [] for under in all_under: if all_under[under] in comp_attachments: attachments_to_add.append(under) for attachment in attachments_to_add: copied = copy.deepcopy(attachment_dic_format) copied[\"Value\"] = attachment if copied not in item_data[\"Value\"]: item_data[\"Value\"].append(copied) continuejson.dump(data, open(f\"output/everything_unlocked_itemdatatable.json\", \"w\"))" }, { "title": "Tools", "url": "/posts/tools/", "categories": "Misc", "tags": "umodel, fmodel, psk", "date": "2022-07-19 00:00:00 +0000", "snippet": "Modding ToolsUModelAllows for accessing UE4 game files.Link: https://www.gildor.org/en/projects/umodel#files [UE5.3] Outdated for Unreal Engine 5.3FModelAllows for accessing and exporting UE5 game files.Link: https://fmodel.app [UE5.3] Needs a Mappings.usmap for full functionality If crashing occures, navigate to %appdata%/Roaming and delete the FModel folder.Universal Unreal UnlockerUnlocks the console in UE4 games.Link: https://framedsc.com/GeneralGuides/universal_ue4_consoleunlocker.htm [UE5.3] Outdated for Unreal Engine 5.3UE4SSCan unlock the console in UE4/UE5 games and much more.Dumpers, Scripting SystemLink: https://github.com/UE4SS-RE/RE-UE4SSGuide: UE4SS Ready Or Not ConfigurationBlender PSK PluginGives option to import .psk, psa, pskx files into Blender.Link: https://github.com/Befzz/blender3d_import_psk_psaQuantumPAKAllows for easy PAKing and UNPAKing of files without needing to install UE4 or creating batch files.Link: QuantumPAK [UE5.3] Outdated for Unreal Engine 5.3Setup: Extract the zip. Download UnrealPakTool from here. Extract the contents of UnrealPakTool, and move all of the contents within the UnrealPakTool folder to ...\\UnrealPaker\\Engine\\Binaries\\Win64. Run QuantumPAK.exe.UAssetGUIAllows editing raw .uasset files. Use responsibly.Link: https://github.com/atenfyr/UAssetGUI [UE5.3] Needs a Mappings.usmap for full functionalityQuickCook + QuickMapAutomates Cooking, Copying, Paking and opening the game to a specific level within a UE4 widget.Guide: Quick Cook Usage GuideLink: QuickCookV4.zipQuickMap: pakchunk99-QuickLoadV4.zip Nexus Mods mod.ioFMOD AudioFMOD Bank ToolsAllows unpacking and repacking of FMOD banks.Link: https://www.nexusmods.com/rugbyleaguelive3/mods/2?tab=docs Limited to single FSB banks Use version 0.0.1.40.0.1.6 is known to result in an infinite progress bar when trying to repack.FSB Files Extractor (fsbext)Allows raw unpacking and repacking of FMOD fsb files.Link: https://aluigi.altervista.org/papers.htm#fsbextBat scripts: fsbextbats.zip Includes makeFSB.bat and extractFSB.bat To use bat, place fsbext.zip contents with bat files in /fsbext for examplebmsbankQuickBMS script to export and inject multiple fsb files from FMOD banks.Link: bmsbank.zip Includes bank.bms, quickbms.exe, extractBank.bat, injectBank.batOriginal scriptQuickBMSAudacityFree multi track audi editing software.Latest: https://www.audacityteam.org/download/windows/2.4.2: https://archive.org/download/audacity-2.4.2/audacity-win-2.4.2.exe 2.4.2 has no telemetryOther ToolsQuantum Mod Manager v3.9A simple mod manager made for Ready or Not. Quickly enable and disable mods, and create and save profiles.Link: Quantum Mod ManagerSetup: Run QuantumModManager.exe. Select the Paks folder located within your Ready or Not install location if the folder selection window pops up." }, { "title": "Texture Modding", "url": "/posts/texturemodding/", "categories": "Texture Modding", "tags": "texture", "date": "2022-07-19 00:00:00 +0000", "snippet": "Texture ModdingTexture ReplacementTexture replacement is the easiest to mod. An example can be found in Example Mod. If you are doing more than recoloring, you will also need to edit the normal and ORM maps. When ripping files from the game, look for files that contain T_, BaseColor, _B, as these files are usually the texture files. Modify the texture however you would like with GIMP, Photoshop, or any other image editing software. You can also use Substance Painter, and doing such will make texturing much easier. As with overriding any other object from the game, make sure to replicate the location of the texture. If you don’t, the changes won’t apply. Create a .pak file, and everything should work properly." }, { "title": "Sound Modding", "url": "/posts/soundmodding/", "categories": "Sound Modding", "tags": "sound, fmod", "date": "2022-07-19 00:00:00 +0000", "snippet": "Sound ModdingVoiceover ModdingVoice over modding is incredibly easy.Simply navigate to …/Ready Or Not/ReadyOrNot/Content/VO/… and replace any lines you wish to replace.FMOD Modding with FMOD Bank Tool FMOD Bank Tool will only work on the first FSB in a bank. See below for compatible single FSB banks; CmndMenu, Data Center, Dealer Level, Farm Level, Fast Food, Gas Level, Hotel Civ Lines, Importer Level, Killhouse Level, Lobby Level, MainMenu, Meth Apartments, Meth Level, Police Station Level, Port Level, PVP Lines, Ridgeline, RUS, School Level, SWAT Lines, Training Level Extract an FMOD Bank with FMOD Bank Tool from .../Ready Or Not/ReadyOrNot/Content/FMOD/Desktop/…. Edit or replace any sounds you wish. Make sure the file you are replacing with is the same format as the original file. Using FMOD Bank Tools, repack all the files and replace the FMOD Bank within the game files.FMOD Modding with Bank Injection and FSB tools Use this method for banks with multiple .fsb and .wav files. See below for notable multi-FSB banks; Agency, Club, Global Amb, Hospital, Hotel Level, Interactions, Master, Penthouse, Shield, SWAT, Tools, UI, Valley Level, WeaponsBank and FSB Extraction Setup a directory to extract and repack from with no file permission issues.I’m working from C:/Files/ronFMOD/Put your FMOD tool folders here (bmsbank and fsbext) for ease of use.Also create a /banks or individual project folder. /ronFMOD /banks /bmsbank /fsbext Copy .bank file/s from the game’s install location to your /banks folder .bank are located in .../Ready Or Not/ReadyOrNot/Content/FMOD/Desktop/ Open the /bmsbank tool folder in another window, then drag a bank from /banks onto /bmsbank/extractBank.bat Usually two .fsb files should now be in /banks/out/&lt;BANKNAME&gt;/00000000.fsb and 00000001.fsb for example Navigate to /banks/out/&lt;BANKNAME&gt;/Open the /fsbext folder in another window,Drag the .fsb containing desired audio onto /fsbext/extractFSB.bat For weapon SFX it is 00000001.fsbA .dat file will be created for rebuilding the fsb later.Extracted audio files should be in /banks/out/&lt;BANKNAME&gt;/&lt;FSBNAME&gt;/ and .wav, not .ogg file format. Windows will optimize the folder to music, reducing navigation speed and sorting. You can change the properties on this folder or all sub directories of /ronFMOD to General.Audio Editing Use a program such as Audacity to open, edit and export your .wav files Audio length needs to match the source Project Rate is usually 48000Hz Encoding needs to match the source which for RoN .wav, I think, is Signed 16-bit PCM. Check file sizes are identical to confirm. Video of mostly relevant Audacity editingFSB Rebuild and Bank Injection Navigate to /banks/out/&lt;BANKNAME&gt;/With the /fsbext folder open in another window, drag &lt;FSBNAME&gt;.dat onto /fsbext/makeFSB.bat For weapon SFX it is 00000001.dat Navigate to /banks/out/&lt;BANKNAME&gt;/new/Copy your new fsb to /banks/in/&lt;BANKNAME&gt;/ Confirm the size is identical to the original just outside of /new Navigate to /banks/With the /bmsbank folder open in another window, drag your .bank onto /bmsbank/injectBank.bat to inject your modified .fsb into the file. Backup the original .bank from .../Ready Or Not/ReadyOrNot/Content/FMOD/Desktop/ Change the file extension of your backup to something else like .bankoriginal for example to keep it in the same folder. Copy your injected .bank file from /banks to your games .../FMOD/Desktop/ folder.Confirm the filesize matches the original file." }, { "title": "Skeletal Mesh Modding", "url": "/posts/skeletalmeshmodding/", "categories": "Skeletal Mesh Modding", "tags": "skeletal mesh", "date": "2022-07-19 00:00:00 +0000", "snippet": "Skeletal Mesh ModdingSkeletal Mesh Replacement Extract the model as a .psk using UModel. Import file into Blender using the Blender PSK plugin. Change the units into Metric, Meters, with a scale of 0.01. Scale the model and skeleton by 100. Unparent the skeleton from the model. Import the model you want to replace the normal model with, and resize it to fit properly. Delete the old model. And apply all transforms with Ctrl + A. Parent the skeleton to the new model using Ctrl + P. I recommend not automatically weight painting, and doing everything manually. Also make sure the root bone is the correct one. For guns this should be J_Gun. For other skeletal meshes, this will be something different. You can view the root bone in UModel. If you have another bone as the root, rename it to Armature, this makes Blender ignore that bone. Paint the weights accordingly. For guns you’ll most likely want to paint each moving piece with a value of 1.0. Export the file as an .fbx without leaf bones. Import the file into UE4. In order to make material files work, they must be instances of preexisting materials in the game. Instance a material, edit as you would like. Hook up your texture assets. This will be talked about in Material Replacement. Cook the content, and put the texture, material, and mesh files in the correct places. Make sure to add a _P to the end of your .pak file name. This makes it a patch file." }, { "title": "Material Modding", "url": "/posts/materialmodding/", "categories": "Material Modding", "tags": "material", "date": "2022-07-19 00:00:00 +0000", "snippet": "Material ModdingMaterial Replacement Using FModel, locate the master material you wish to use. Ensure that the material name somewhat correlates to what you are modding. For example, an attachment should have the master material Weapon_1P_Toprain_MASTER. Alternatively, you can use UModel to export the material and look at the .txt file. In that file, while still using FModel, locate three parameters. These parameters will point to the Normal, Texture, and ORM maps. If you are using UModel instead, you can also view these parameters. In UE4, create a fake master material with the same name in the same location as where it is within the game. You will not be exporting this file unless you uncheck the Share Material Shader Code in Project Settings &gt; Packaging. In that master material, make sure to create three texture parameters named the same as the parameters you found using FModel or UModel. Make sure to hook up these nodes accordingly. Create a new material instance with the master material being the Parent, and pass in the relevant Normal, Texture, and ORM maps. Assign this material to the model you are overriding." }, { "title": "FAQ", "url": "/posts/faq/", "categories": "General Information", "tags": "faq", "date": "2022-07-19 00:00:00 +0000", "snippet": "FAQQ: How do I install/uninstall mods?Navigate to your Ready or Not install directory and go to …/ReadyOrNot/Content/Paks/… and drag in any .pak mods which you wish to install. If you want to uninstall, simply delete the mods from that directory.Q: Can I still play online with mods?Yes, although you’ll need to disable Server Side Checksum in settings in order to join or host modded lobbies.Q: Can other people see my mods?Most are not visible to other players unless they also have the mod installed.Q: Will I get banned for using mods?No, unless you cheat via other means. Mods are supported by the developers.Q: Where can I find mods?NexusMods is the recommended place to find mods. Any other website may not be safe and can harm the creators of the mod.Q: Should I start modding?Depends on your willingness to learn. Modding can be difficult to get into, but isn’t too hard either. The SDK is coming on or post game release, which will be when mods are officially supported. Along with the SDK will come ease of modding, which we do not currently have." }, { "title": "Batch Files", "url": "/posts/batchfiles/", "categories": "General Information", "tags": "batch", "date": "2022-07-19 00:00:00 +0000", "snippet": "Batch Files 5.3 These UnrealPak bat files are placed in your engine folder, next to UnrealPak.exeYou can create file shortcuts for easier access....\\UE_5.3\\Engine\\Binaries\\Win64\\Pak Dragged FolderDownload: Pak.bat Example folder contents: ...\\pakchunk99-Mod_ExampleMod_P\\Content\\...@setlocal ENABLEDELAYEDEXPANSION@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~1(for /R %%f in (*) do @set \"filePath=%%f\" &amp; set \"relativePath=!filePath:%~1=!\" &amp; @echo \"%%f\" \"../../../ReadyOrNot!relativePath!\")&gt;\"%~dp0/filelist.txt\"@pushd %~dp0::-compresslevel=4 for Normal, -compresslevel=-4 for uncompressed hyperfast paking.\\UnrealPak.exe \"%~1.pak\" -create=filelist.txt -compress -compressionformats=Oodle -compressmethod=Kraken -compresslevel=4@popd@pause:skip Do not include any symbols besides - _ in your full folder paths.Broken Folder Structure Example: C:\\Mods, Bats &amp; Stuff\\pakchunk99-Mod_ExampleMod_P\\ You can change ../../../ReadyOrNot to ../../..This allows you to include engine assets for a level’s master material dependencies for example, but you need to then add a top \\ReadyOrNot\\ folder before paking.For example: ...\\pakchunk99-Mod_ExampleLevel\\ReadyOrNot\\Content\\...Extract to the Pak’s containing folder with folders intactDownload: Unpak.bat@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~dp0md \"%~dpn1\\\".\\UnrealPak.exe %1 -extract \"%~dpn1\\\\\" -extracttomountpoint@popd@pause:skipBatch Files 4.27Extract to Win64@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~dp0.\\UnrealPak.exe %1 -extract \"%~n1\"@popd@pause:skipExtract to Custom Directory@if \"%~1\"==\"\" goto skip::REPLACE WITH YOUR DIRECTORY TO EXTRACT TO@set output_location=C:\\Program Files (x86)\\Steam\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\Paks@setlocal enableextensions@pushd %~dp0@echo %output_location%/%~n1.\\UnrealPak.exe %1 -extract \"%output_location%\\%~n1\"@popd@pause:skip The following create Pak batch files may need to be updated for the Ready Or Not UE5.3/Home Invasion updatePak to Same Directory@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~dp0@echo \"%~1\\*.*\" \"../../../ReadyOrNot/\" &gt;filelist.txt.\\UnrealPak.exe \"%~1.pak\" -create=filelist.txt -compress@popd@pause:skipPak to Custom Directory@if \"%~1\"==\"\" goto skip::REPLACE WITH YOUR DIRECTORY@set output_location=C:\\Program Files (x86)\\Steam\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\Paks@setlocal enableextensions@pushd %~dp0@echo %output_location%%~n1.pak@echo \"%~1\\*.*\" \"../../../ReadyOrNot/\" &gt;filelist.txt.\\UnrealPak.exe \"%output_location%\\%~n1.pak\" -create=filelist.txt -compress@popd@pause:skip" }, { "title": "AI Modding", "url": "/posts/aimodding/", "categories": "AI Modding", "tags": "ai", "date": "2022-07-19 00:00:00 +0000", "snippet": "AI Modding Go to your extracted game pak, enter .../ReadyOrNot/Config/…, and open AILevelData.ini. Edit the AILevelData.ini file however you would like. Create a new pakchunk mod folder, just as you would with any other mod. However, make sure to add _P to the end of the folder name. Inside that folder, create the directory Config, and put your AILevelData.ini file inside. Pak the mod.Alternatively, you may use this website to generate the mods for you." }, { "title": "Adding Weapons", "url": "/posts/adding_weapons/", "categories": "UAsset Modding", "tags": "weapon, uasset", "date": "2022-07-19 00:00:00 +0000", "snippet": "UAsset Editing: Adding New Weapons (WIP)Tutorial Provided by 0w0-YuiRequirements UAssetGUI/Asset Editor (Reccomend use both to get higher efficiency) UModel/FModel (Recommend UModel Here, FModel includes bugs will affect the modding) python (Optional) JSON Viewer (Optional, I use VS Code) [UE5.3] UassetGUI and FModel now need a Mappings.usmap for full functionalityGetting StartPreparations You need a weapon replacement mod first. I will list some definitions before the tutorial start. It will be easier to understand. Save IDT and UI using UModel “Save selected packages”. Navigate to “Game\\Blueprints\\Items\\WeaponRevised”, and export the blueprint of the weapon you’re replacing. Defined_Name Description IDT “Game\\Blueprints\\DataTables\\ItemDataTable.uasset” UI “Game\\ReadyOrNot\\UI\\Planning\\ItemData.uasset” WP-BP “Game\\Blueprints\\Items\\WeaponRevised”(UAssets Exported from this Location) AT-BP “Game\\Blueprints\\Items\\WeaponRevised”(UAssets Exported from this Location) Index The index of weapon in DataTable. (You will need to come up with your own index to replace the Index in the Tutorial, make sure there are no index with the same name in the IDT) Understanding How the Blueprint WorkData include in .uasset, I call it headers Name Map/Header List: Include all object names used in this Blueprint. Import Data/Linked Class: To link other file (Blueprint, Model, Skeleton, etc.) to this Blueprint. Export Data/Code Blocks: Manage external file access to this Blueprint.Data include in .uexp Export Data/Block 1: This is where the data acutally saved..uasset point to .uexp, if you rename the file, they will broken. The right way is open the editor, and use “save as” to rename.Tutorials Close the UAssetGUI open before. Launch the Asset Editor, choose 4.25 at top right. Open IDT. Find the weapon you are replacing at “\\Code Block\\Block 1\\DataTable&lt;WeaponName&gt;”, select it at the left side, and export sub (Edit-&gt;Export Sub) Choose one method Go to the exported sub open it, rename the “\\CoreItem\\NameString” and “CoreItem\\SubTypeString” to Index Import the sub (Edit-&gt;Import sub), rename the index at “\\Code Block\\Block 1\\DataTable”. (You can skip next step 5 if you choose this method) " } ]
